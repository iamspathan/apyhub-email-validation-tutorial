{"version":3,"file":"apyhub.esm.js","sources":["../src/ApyClient.ts","../src/search/fuzzy.ts","../src/utils/checkMissingParams.ts","../src/utils/checkParamsTypes.ts","../src/validate/email.ts","../src/validate/postcode.ts","../src/validate/vat.ts","../src/utils/getFileExtension.ts","../src/utils/getFormData.ts","../src/utils/handleEndpoint.ts","../src/utils/isFileOrUrl.ts","../src/imageProcessor/crop.ts","../src/imageProcessor/resize.ts","../src/imageProcessor/compress.ts","../src/imageProcessor/watermark.ts","../src/generate/archive.ts","../src/generate/barcode.ts","../src/generate/qr.ts","../src/generate/screenshot.ts","../src/generate/charts.ts","../src/generate/pdf.ts","../src/generate/ical.ts","../src/generate/thumbnail.ts","../src/extract/textFromWebpage.ts","../src/extract/textFromWord.ts","../src/extract/textFromPdf.ts","../src/extract/imageMetadata.ts","../src/extract/unarchive.ts","../src/data/countries.ts","../src/data/country.ts","../src/data/currencyConverter.ts","../src/data/currencyList.ts","../src/data/timezones.ts","../src/utils/handleEndpointConvert.ts","../src/convert/csvToExcel.ts","../src/convert/htmlToPdf.ts","../src/convert/imageToPdf.ts","../src/convert/markdownToHtml.ts","../src/convert/presentationToPdf.ts","../src/convert/spreadsheetToPdf.ts","../src/convert/wordToPdf.ts","../src/utils/download.ts"],"sourcesContent":["import fetch, { Request } from \"cross-fetch\";\nimport FormData from \"form-data\";\n\nclass ApyClient {\n  protected readonly baseUrl = \"https://api.apyhub.com\";\n  protected readonly headers: any;\n  private readonly requestQueue: any[];\n  private readonly rateLimit: 1 | 2 | 3 | 4 | 5;\n  private readonly rateLimitPeriod: number;\n  private rateLimitTimer: any;\n  private requestPromises: any[];\n  protected debug: boolean;\n\n  constructor(\n    apyToken:\n      | string\n      | {\n          username: string;\n          password: string;\n        },\n    options?: { rateLimit: 1 | 2 | 3 | 4 | 5; debug: boolean }\n  ) {\n    this.headers =\n      typeof apyToken === \"string\"\n        ? {\n            \"apy-token\": apyToken,\n          }\n        : typeof apyToken === \"object\" &&\n          apyToken.username &&\n          apyToken.password && {\n            Authorization: `Basic ${Buffer.from(\n              `${apyToken.username}:${apyToken.password}`\n            ).toString(\"base64\")}`,\n          };\n    this.debug = options?.debug ?? false;\n    this.requestQueue = [];\n    this.rateLimit = options?.rateLimit ?? 1;\n    this.rateLimitPeriod = 1000; // Set the rate limit period to 1 second (1000 milliseconds)\n    this.rateLimitTimer = null;\n    this.requestPromises = [];\n  }\n\n  private debugRequest(method: string, url: string, data?: any): void {\n    const request = new Request(url, {\n      method,\n      headers: this.headers,\n      body: data,\n    });\n    console.log(request);\n  }\n\n  async request(\n    method: \"get\" | \"post\",\n    url: string,\n    data?: any,\n    options: any = {}\n  ): Promise<any> {\n    if (!this.headers[\"apy-token\"] && !this.headers[\"Authorization\"]) {\n      throw new Error(\"Basic Authorization or Token is required\");\n    }\n    const headers = { ...this.headers, ...options.headers };\n\n    if (this.debug) {\n      this.debugRequest(method, url, data);\n    }\n\n    // Push the request to the request queue\n    this.requestQueue.push({ method, url, data, headers });\n\n    // Create a new promise to store the request response\n    const requestPromise = new Promise((resolve) => {\n      // Push the promise to the requestPromises array\n      this.requestPromises.push(resolve);\n    });\n\n    // Check if the rate limit timer is running\n    if (this.rateLimitTimer) {\n      // If the timer is running, do nothing\n      return await requestPromise;\n    }\n\n    // Start the rate limiter\n    this.startRateLimiter();\n\n    return await requestPromise;\n  }\n\n  private startRateLimiter(): void {\n    // Start the rate limit timer\n    this.rateLimitTimer = setTimeout(() => {\n      // Reset the timer\n      this.rateLimitTimer = null;\n\n      // Process the request queue\n      void this.processRequestQueue();\n    }, this.rateLimitPeriod);\n  }\n\n  private async processRequestQueue(): Promise<void> {\n    // Take the first n requests from the queue, where n is the rate limit\n    const requests = this.requestQueue.splice(0, this.rateLimit);\n\n    // Process the requests\n    for (let i = 0; i < requests.length; i++) {\n      const request = requests[i];\n      try {\n        let response: any;\n        switch (request.method) {\n          case \"get\":\n            response = await fetch(request.url, {\n              method: \"GET\",\n              headers: request.headers,\n            });\n            break;\n          case \"post\":\n            response = await fetch(request.url, {\n              method: \"POST\",\n              headers: request.headers,\n              body:\n                request.data instanceof FormData\n                  ? request.data\n                  : JSON.stringify(request.data),\n            });\n            break;\n        }\n        // Resolve the corresponding request promise with the response\n        this.requestPromises[i](await this.handleResponse(response));\n      } catch (error) {\n        // Reject the corresponding request promise with the error message\n        this.requestPromises[i](Promise.reject(error));\n      }\n    }\n\n    // Clear the requestPromises array\n    this.requestPromises = [];\n\n    // Check if there are any more requests in the queue\n    if (this.requestQueue.length > 0) {\n      // If there are more requests, start the rate limiter again\n      this.startRateLimiter();\n    }\n  }\n\n  private async handleResponse(response: Response): Promise<any> {\n    if (this.debug) {\n      console.log(response);\n    }\n    if (!response.ok) {\n      const error = await response.text();\n      const errorCode = response.status;\n      throw new Error(`${errorCode}: ${error}`);\n    }\n    const contentType = response.headers.get(\"Content-Type\") ?? \"\";\n    const blobTypes = new Set([\n      \"image/png\",\n      \"image/jpeg\",\n      \"application/zip\",\n      \"application/pdf\",\n    ]);\n\n    const handleBlob = async (responseData: Response): Promise<Blob> =>\n      await responseData.blob();\n    const handleText = async (\n      responseData: Response\n    ): Promise<string | undefined> => await responseData.text();\n    const handleJson = async (\n      responseData: Response\n    ): Promise<Record<string, any> | undefined> => await responseData.json();\n\n    switch (true) {\n      case contentType.includes(\"text/plain\"):\n      case contentType.includes(\"text/html\"):\n        return await handleText(response);\n      default:\n        return blobTypes.has(contentType)\n          ? await handleBlob(response)\n          : await handleJson(response);\n    }\n  }\n}\n\nlet instance: ApyClient | null = null;\n\n// getInstance with ApyClientParams\nfunction getInstance(\n  apyToken?:\n    | string\n    | {\n        username: string;\n        password: string;\n      },\n  options?: {\n    rateLimit: 1 | 2 | 3 | 4 | 5;\n    debug: boolean;\n  }\n): ApyClient {\n  if (!instance) {\n    if (!apyToken) {\n      throw new Error(\"Basic Authorization or Token is required\");\n    }\n    instance = new ApyClient(apyToken, options);\n  }\n  return instance;\n}\n\n/**\n * Initializes the Apyhub API client.\n *\n * @param {string} apyToken - The Apyhub API token or Basic Authorization\n *   credentials.\n * @param {Object} [options] - Options for the API client.\n * @param {1 | 2 | 3 | 4 | 5} [options.rateLimit] - The rate limit for the API\n *   client.\n */\nfunction initApyhub(\n  apyToken:\n    | string\n    | {\n        username: string;\n        password: string;\n      },\n  options?: {\n    rateLimit: 1 | 2 | 3 | 4 | 5;\n    debug: boolean;\n  }\n): void {\n  getInstance(apyToken, options);\n}\n\nexport { initApyhub, getInstance };\n","import { getInstance } from \"../ApyClient\";\n\n/**\n * Fuzzy search.\n *\n * @example\n *   const { search } = require(\"apyhub\");\n *\n *   const fuzzy = async () => {\n *     const data = await search.fuzzy({\n *       source: \"taching\",\n *       target: \"teaching is the best qualifying compare another profession\",\n *       unicodeNormalized: false,\n *     });\n *     return data;\n *   };\n *\n * @param {Object} options - The options for the function.\n * @param {string} options.source - The source text.\n * @param {string} options.target - The target text.\n * @param {boolean} [options.unicodeNormalized] - Whether the text is unicode\n *   normalized. Default is false.\n * @returns {Promise<{ data: string } | undefined>} - A promise that resolves to\n *   an object with the fuzzy search result, or undefined if the response format\n *   is invalid.\n * @link https://apyhub.com/utility/search-fuzzy-text\n */\nasync function fuzzy({\n  source,\n  target,\n  unicodeNormalized = false,\n}: {\n  source: string;\n  target: string;\n  unicodeNormalized?: boolean;\n}): Promise<{ data: string[] } | undefined> {\n  const client = getInstance();\n\n  const requestUrl = `https://api.apyhub.com/search/text/fuzzy?unicode-normalized=${unicodeNormalized.toString()}`;\n\n  // return empty array if source or target is empty string\n  if (!source || !target) {\n    return { data: [] };\n  }\n\n  return await client.request(\n    \"post\",\n    requestUrl,\n    {\n      source,\n      target,\n    },\n    { headers: { \"Content-Type\": \"application/json\" } }\n  );\n}\n\nexport { fuzzy };\n","export const checkMissingParams = (params: Record<string, any>): void => {\n  const missingParams = Object.entries(params).filter(([, value]) => !value);\n  if (missingParams.length > 0) {\n    const errorMessage = `Missing parameters: ${missingParams\n      .map(([key]) => key)\n      .join(\", \")}`;\n    throw new Error(errorMessage);\n  }\n};\n","export const checkParamTypes = (\n  params: Record<string, any>,\n  values: string | string[]\n): void => {\n  // check if the `values` parameter is a string or an array of strings\n  const stringValues = typeof values === \"string\" ? [values] : values;\n\n  // check if all the values in `params` are strings and are equal to one of the values in `values`\n  const invalidParams = Object.entries(params).filter(\n    ([, value]) => typeof value !== \"string\" || !stringValues.includes(value)\n  );\n\n  if (invalidParams.length > 0) {\n    const errorMessage = `Invalid parameters: ${invalidParams\n      .map(([key]) => key)\n      .join(\", \")}. \\nSupported values are: ${stringValues.join(\", \")}`;\n    throw new Error(errorMessage);\n  }\n};\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\n\n/**\n * Validates an email address.\n *\n * @example\n *   const { validate } = require(\"apyhub\");\n *\n *   const email = async () => {\n *     const data = await validate.email({\n *       email: \"hello@apyhub.com\",\n *       checkType: \"dns\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} options - The options for the function.\n * @param {string} options.email - The email address to validate.\n * @param {\"dns\" | \"academic\"} options.checkType - The type of validation to\n *   perform. Can be either \"dns\" or \"academic\".\n * @returns {Promise<{ data: boolean }>} - A promise that resolves to an object\n *   with the validation result.\n * @link https://apyhub.com/utility/validator-dns-email\n * @link https://apyhub.com/utility/validator-academic-email\n */\nasync function email({\n  email,\n  checkType,\n}: {\n  email: string;\n  checkType: \"dns\" | \"academic\";\n}): Promise<{ data: boolean }> {\n  const client = getInstance();\n  checkMissingParams({ email, checkType });\n  checkParamTypes({ checkType }, [\"dns\", \"academic\"]);\n\n  const url = `https://api.apyhub.com/validate/email/${checkType}`;\n  return await client.request(\"post\", url, { email });\n}\n\nexport { email };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\n// generate jsdocs for the postcode validator\n\n/**\n * Validates a postcode.\n *\n * @example\n *   const { validate } = require(\"apyhub\");\n *\n *   const validatePostcode = async () => {\n *     const data = await validate.postcode({\n *       postcode: \"560037\",\n *       countryCode: \"in\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} options - The options for the function.\n * @param {string} options.postcode - The postcode to validate.\n * @param {\"in\" | \"uk\"} options.countryCode - The country code of the postcode.\n *   Can be either \"in\" or \"uk\".\n * @returns {Promise<{ data: boolean }>} - A promise that resolves to an object\n *   with the validation result.\n * @link https://apyhub.com/utility/data-postcodes-india\n * @link https://apyhub.com/utility/data-postcodes-uk\n */\nasync function postcode({\n  postcode,\n  countryCode,\n}: {\n  postcode: string;\n  countryCode: \"in\" | \"uk\";\n}): Promise<{ data: boolean }> {\n  const client = getInstance();\n  checkMissingParams({ postcode, countryCode });\n  checkParamTypes({ countryCode: countryCode.toLowerCase() }, [\"in\", \"uk\"]);\n\n  const url = `https://api.apyhub.com/validate/postcodes/${countryCode.toLowerCase()}`;\n  return await client.request(\"post\", url, { postcode });\n}\n\nexport { postcode };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\n\n// generate jsdocs for the vat validator\n\n/**\n * Validates a VAT number.\n *\n * @example\n *   const { validate } = require(\"apyhub\");\n *\n *   const validateVat = async () => {\n *     const data = await validate.vat({\n *       vat: \"GB123456789\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} options - The options for the function.\n * @param {string} options.vat - The VAT number to validate.\n * @returns {Promise<{ data: boolean }>} - A promise that resolves to an object\n *   with the validation result.\n * @link https://apyhub.com/utility/vat-number-validator\n */\nasync function vat(vat: string): Promise<{ data: boolean }> {\n  const client = getInstance();\n  checkMissingParams({ vat });\n  const url = `https://api.apyhub.com/validate/vat`;\n  return await client.request(\"post\", url, { vat });\n}\n\nexport { vat };\n","export function getFileExtension(buffer: Buffer) {\n  // Check for the various file types we support.\n  if (buffer.slice(0, 4).toString() === \"%PDF\") {\n    return \"pdf\";\n  } else if (buffer.slice(0, 2).toString() === \"PK\") {\n    return \"docx\";\n  } else if (buffer.slice(0, 2).toString() === \"PK\") {\n    return \"pptx\";\n  } else if (buffer.slice(0, 2).toString() === \"PK\") {\n    return \"xlsx\";\n  } else if (buffer.slice(0, 5).toString() === \"<html\") {\n    return \"html\";\n  } else if (buffer.slice(0, 3).toString() === \"---\") {\n    return \"md\";\n  } else if (buffer.slice(0, 2).toString() === \"BM\") {\n    return \"jpg\";\n  } else if (buffer.slice(0, 3).toString() === \"GIF\") {\n    return \"jpg\";\n  } else if (buffer.slice(0, 3).toString() === \"PNG\") {\n    return \"jpg\";\n  } else if (buffer.slice(0, 4).toString() === \"\\x89PNG\") {\n    return \"jpg\";\n  } else if (buffer.slice(0, 4).toString() === \"\\xff\\xd8\\xff\\xe0\") {\n    return \"jpg\";\n  } else if (buffer.slice(0, 4).toString() === \"\\xff\\xd8\\xff\\xe1\") {\n    return \"jpg\";\n  } else if (buffer.slice(0, 4).toString() === \"ID\\x01\\x02\") {\n    return \"csv\";\n  }\n  // If the file type isn't recognized, return null.\n  return null;\n}\n","import * as fs from \"fs\";\nimport * as path from \"path\";\nimport FormData from \"form-data\";\nimport { getFileExtension } from \"./getFileExtension\";\n\nexport function getFormData(\n  file: string | Buffer | (string | Buffer)[],\n  fieldName: string\n): FormData {\n  const formData = new FormData();\n  if (typeof file === \"string\" || file instanceof Buffer) {\n    file = [file];\n  }\n  for (const f of file) {\n    if (typeof f === \"string\") {\n      const absoluteFilePath = path.resolve(f);\n      const fileBuffer = fs.readFileSync(absoluteFilePath);\n      formData.append(fieldName, fileBuffer, {\n        contentType: \"application/octet-stream\",\n        filename: path.basename(absoluteFilePath),\n      });\n    } else {\n      formData.append(fieldName, f, {\n        contentType: \"application/octet-stream\",\n        filename: `file.${getFileExtension(f)}`,\n      });\n    }\n  }\n  return formData;\n}\n\nexport function getFile(filePath: string): Buffer {\n  const absoluteFilePath = path.resolve(filePath);\n  const file = fs.readFileSync(absoluteFilePath);\n\n  return Buffer.from(file);\n}\n","export function handleEndPoint(\n  type: string,\n  inputType: string,\n  responseFormat: string\n): string {\n  if (inputType === \"file\" && responseFormat === \"file\") {\n    return `${type}/file`;\n  } else if (inputType === \"file\" && responseFormat === \"url\") {\n    return `${type}/file/url${type === \"resize\" ? \"s\" : \"\"}`;\n  } else if (inputType === \"url\" && responseFormat === \"file\") {\n    return `${type}/url/file`;\n  } else if (inputType === \"url\" && responseFormat === \"url\") {\n    return `${type}/file-urls`;\n  }\n  return \"\";\n}\n","export function isFileOrUrl(input: string | Buffer): string {\n  if (input instanceof Buffer) {\n    return \"file\";\n  } else if (\n    input.match(\n      /^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/\n    )\n  ) {\n    return \"url\";\n  } else {\n    return \"file\";\n  }\n}\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { handleEndPoint } from \"../utils/handleEndpoint\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Crops an image file or URL.\n *\n * @example\n *   const { imageProcessor } = require(\"apyhub\");\n *\n *   const crop = async () => {\n *     const data = await imageProcessor.crop({\n *       responseFormat: \"url\",\n *       input: \"https://assets.apyhub.com/samples/sample.pdf\",\n *       height: 200,\n *       width: 200,\n *       output: \"output.png\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the image cropping.\n * @param {\"url\" | \"file\"} params.responseFormat - The desired response format.\n * @param {string | Buffer} params.input - The image file or URL to crop.\n * @param {number} params.height - The desired height of the cropped image.\n * @param {number} params.width - The desired width of the cropped image.\n * @param {string} [params.output] - The desired file name for the output\n *   cropped image.\n * @returns {Promise<{ data: string }>} - A promise that resolves with an object\n *   containing the resulting cropped image file or URL as a string.\n * @link https://apyhub.com/utility/image-processor-crop\n */\n\nasync function crop({\n  input,\n  responseFormat,\n  height,\n  width,\n  output,\n}: {\n  input: string | Buffer;\n  responseFormat: \"url\" | \"file\";\n  height: number;\n  width: number;\n  output?: string;\n}): Promise<{ data: string } | undefined> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat, height, width });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const inputType = isFileOrUrl(input);\n\n  const url = `https://api.apyhub.com/processor/image/${handleEndPoint(\n    \"crop\",\n    inputType,\n    responseFormat\n  )}?output=${output ?? \"output.png\"}&height=${height}&width=${width}`;\n\n  return await client.request(\n    \"post\",\n    url,\n    inputType === \"file\" ? getFormData(input, \"image\") : { url: input }\n  );\n}\n\nexport { crop };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { handleEndPoint } from \"../utils/handleEndpoint\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Resizes an image file or URL.\n *\n * @example\n *   const { imageProcessor } = require(\"apyhub\");\n *\n *   const resize = async () => {\n *     const data = await imageProcessor.resize({\n *       responseFormat: \"url\",\n *       input: \"https://assets.apyhub.com/samples/sample.pdf\",\n *       height: 200,\n *       width: 200,\n *       output: \"output.png\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the image resizing.\n * @param {\"url\" | \"file\"} params.responseFormat - The desired response format.\n * @param {string | Buffer} params.input - The image file or URL to resize.\n * @param {number} params.height - The desired height of the resized image.\n * @param {number} params.width - The desired width of the resized image.\n * @param {string} [params.output] - The desired file name for the output\n *   resized image.\n * @returns {Promise<{ data: string }>} - A promise that resolves with an object\n *   containing the resulting resized image file or URL as a string.\n * @link https://apyhub.com/utility/image-processor-resize\n */\n\nasync function resize({\n  input,\n  responseFormat,\n  height,\n  width,\n  output,\n}: {\n  input: string | Buffer;\n  responseFormat: \"url\" | \"file\";\n  height: number;\n  width: number;\n  output?: string;\n}): Promise<{ data: string } | undefined> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat, height, width });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const inputType = isFileOrUrl(input);\n\n  const requestUrl = `https://api.apyhub.com/processor/image/${handleEndPoint(\n    \"resize\",\n    inputType,\n    responseFormat\n  )}?output=${output ?? \"output.png\"}&height=${height}&width=${width}`;\n\n  return await client.request(\n    \"post\",\n    requestUrl,\n    inputType === \"file\" ? getFormData(input, \"image\") : { url: input }\n  );\n}\n\nexport { resize };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { handleEndPoint } from \"../utils/handleEndpoint\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Compresses an image file or URL.\n *\n * @example\n *   const { imageProcessor } = require(\"apyhub\");\n *\n *   const compress = async () => {\n *     const data = await imageProcessor.compress({\n *       responseFormat: \"url\",\n *       input: \"https://assets.apyhub.com/samples/sample.png\",\n *       quality: 50,\n *       output: \"compressed.png\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the image compression.\n * @param {\"url\" | \"file\"} params.responseFormat - The desired response format.\n * @param {string | Buffer} params.input - The image file or URL to compress.\n * @param {number} params.quality - The desired quality of the compressed image.\n * @param {string} [params.output] - The desired file name for the output\n *   compressed image.\n * @returns {Promise<{ data: string }>} - A promise that resolves with an object\n *   containing the resulting compressed image file or URL as a string.\n * @link https://apyhub.com/utility/image-processor-compress\n */\nasync function compress({\n  input,\n  responseFormat,\n  quality,\n  output,\n}: {\n  input: string | Buffer;\n  responseFormat: \"url\" | \"file\";\n  // TODO: add typescript support for quality > 1 && < 99\n  quality: number;\n  output?: string;\n}): Promise<{ data: string } | undefined> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat, quality });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const inputType = isFileOrUrl(input);\n\n  const requestUrl = `https://api.apyhub.com/processor/image/${handleEndPoint(\n    \"compress\",\n    inputType,\n    responseFormat\n  )}?output=${output ?? \"output.png\"}&quality=${quality}`;\n\n  return await client.request(\n    \"post\",\n    requestUrl,\n    inputType === \"file\" ? getFormData(input, \"image\") : { url: input }\n  );\n}\n\nexport { compress };\n","import FormData from \"form-data\";\nimport { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\nimport { getFile } from \"../utils/getFormData\";\nimport { handleEndPoint } from \"../utils/handleEndpoint\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Adds a watermark to an image.\n *\n * @example\n *   const { imageProcessor } = require(\"apyhub\");\n *\n *   const watermark = async () => {\n *     const data = await imageProcessor.watermark({\n *       input: \"https://assets.apyhub.com/samples/sample.pdf\",\n *       watermark: \"https://assets.apyhub.com/samples/sample.pdf\",\n *       responseFormat: \"url\",\n *       output: \"output.png\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} options - The options for the function.\n * @param {string | Buffer} options.input - The input image as a file path or\n *   URL, or as a Buffer if it is a file.\n * @param {string} options.watermark - The watermark image as a file path or\n *   URL, or as a Buffer if it is a file.\n * @param {\"url\" | \"file\"} options.responseFormat - The desired response format.\n *   Can be either \"url\" or \"file\".\n * @param {string | Buffer} [options.output] - The desired file name for the\n *   output image. Default is \"output.png\".\n * @returns {Promise<{ data: string } | undefined>} - A promise that resolves to\n *   an object with the watermarked image as a URL or file, or undefined if the\n *   response format is invalid.\n * @link https://apyhub.com/utility/image-processor-watermark\n */\n\nasync function watermark({\n  input,\n  watermark,\n  responseFormat,\n  output,\n}: {\n  input: string | Buffer;\n  watermark: string | Buffer;\n  responseFormat: \"url\" | \"file\";\n  output?: string;\n}): Promise<{ data: string } | undefined> {\n  const client = getInstance();\n  checkMissingParams({ input, watermark, responseFormat });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const inputType = isFileOrUrl(input);\n\n  const requestUrl = `https://api.apyhub.com/processor/image/${handleEndPoint(\n    \"watermark\",\n    inputType,\n    responseFormat\n  )}?output=${output ?? \"output.png\"}`;\n\n  const formData = (): FormData => {\n    const formData = new FormData();\n\n    formData.append(\"image\", input instanceof Buffer ? input : getFile(input), {\n      filename: \"image.png\",\n      contentType: \"application/octet-stream\",\n    });\n    formData.append(\n      \"watermark\",\n      watermark instanceof Buffer ? watermark : getFile(watermark),\n      {\n        filename: \"watermark.png\",\n        contentType: \"application/octet-stream\",\n      }\n    );\n\n    return formData;\n  };\n  return await client.request(\n    \"post\",\n    requestUrl,\n    inputType === \"file\"\n      ? formData()\n      : { imageUrl: input, watermarkUrl: watermark }\n  );\n}\n\nexport { watermark };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Creates an archive file (zip) from a list of files or URLs.\n *\n * @example\n *   const { generate } = require(\"apyhub\");\n *\n *   const archive = async () => {\n *     const data = await generate.archive({\n *       responseFormat: \"url\",\n *       input: [\n *         \"https://assets.apyhub.com/samples/sample.pdf\",\n *         \"https://assets.apyhub.com/samples/sample.xlsx\",\n *       ],\n *     });\n *     return data;\n *   };\n *\n * @example\n *   const { generate } = require(\"apyhub\");\n *\n *   const secureArchive = async () => {\n *     const data = await generate.archive({\n *       responseFormat: \"url\",\n *       input: [\n *         \"https://assets.apyhub.com/samples/sample.pdf\",\n *         \"https://assets.apyhub.com/samples/sample.xlsx\",\n *       ],\n *       password: \"password\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the archive creation.\n * @param {\"url\" | \"file\"} params.responseFormat - The desired response format.\n * @param {string} [params.output] - The desired file name for the output\n *   archive.\n * @param {string[] | Buffer[]} params.input - The list of files or URLs to\n *   archive.\n * @param {string} [params.password] - The password to use for secure archiving.\n * @returns {Promise<{ data: string }>} - A promise that resolves with an object\n *   containing the resulting archive file or URL as a string.\n * @link https://apyhub.com/utility/generate-file-archive\n * @link https://apyhub.com/utility/generate-secure-file-archive\n */\nasync function archive({\n  responseFormat,\n  output,\n  input,\n  password,\n}: {\n  responseFormat: \"url\" | \"file\";\n  output?: string;\n  input: string[] | Buffer[];\n  password?: string;\n}): Promise<{ data: string }> {\n  const client = getInstance();\n  checkMissingParams({ responseFormat, input });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const endpoint = password ? \"secure-archive\" : \"archive\";\n\n  const responseType =\n    responseFormat === \"file\" ? \"archive-file\" : \"archive-url\";\n  const inputType = isFileOrUrl(input[0]) === \"file\" ? \"files\" : \"file-urls\";\n  const url = `\n    https://api.apyhub.com/generate/${endpoint}/${inputType}/${responseType}?output=${output ??\n    \"output.zip\"}`;\n\n  const formData = () => {\n    const formData = getFormData(input, \"files\");\n    password && formData.append(\"password\", password);\n    return formData;\n  };\n\n  const data =\n    inputType === \"file-urls\"\n      ? {\n          urls: input,\n          password: password ?? undefined,\n        }\n      : formData();\n\n  return await client.request(\"post\", url, data);\n}\n\nexport { archive };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\n\n/**\n * Generates a barcode image from a string of up to 80 characters.\n *\n * @example\n *   const { generate } = require(\"apyhub\");\n *\n *   const barcode = async () => {\n *     const data = await generate.barcode({\n *       responseFormat: \"url\",\n *       input: \"https://apyhub.com\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the barcode generation.\n * @param {string & { maxLength: 80 }} params.input - The string to generate the\n *   barcode from.\n * @param {\"file\" | \"url\"} params.responseFormat - The desired response format.\n * @param {string} [params.output] - The desired file name for the output\n *   barcode image.\n * @returns {Promise<{ data: string }>} - A promise that resolves with an object\n *   containing the resulting barcode image file or URL as a string.\n * @link https://apyhub.com/utility/generate-bar-code\n */\nasync function barcode({\n  input,\n  responseFormat,\n  output,\n}: {\n  input: string & { maxLength: 80 };\n  responseFormat: \"file\" | \"url\";\n  output?: string;\n}): Promise<{ data: string }> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const url = `https://api.apyhub.com/generate/barcode/${responseFormat}?output=${\n    output ?? \"output.png\"\n  }`;\n  return await client.request(\"post\", url, { content: input });\n}\n\nexport { barcode };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\n\n/**\n * Generates a QR code image from a string.\n *\n * @example\n *   const { generate } = require(\"apyhub\");\n *\n *   const qr = async () => {\n *     const data = await generate.qr({\n *       responseFormat: \"url\",\n *       input: \"https://apyhub.com\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the QR code generation.\n * @param {string} params.input - The string to generate the QR code from.\n * @param {\"file\" | \"url\"} params.responseFormat - The desired response format.\n * @param {string} [params.output] - The desired file name for the output QR\n *   code image.\n * @returns {Promise<{ data: string }>} - A promise that resolves with an object\n *   containing the resulting QR code image file or URL as a string.\n * @link https://apyhub.com/utility/generate-qr-code\n */\nasync function qr({\n  input,\n  responseFormat,\n  output,\n}: {\n  input: string;\n  responseFormat: \"file\" | \"url\";\n  output?: string;\n}): Promise<{ data: string }> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const url = `https://api.apyhub.com/generate/qr-code/${responseFormat}?output=${\n    output ?? \"output.png\"\n  }`;\n  return await client.request(\"post\", url, { content: input });\n}\n\nexport { qr };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\n\n/**\n * Takes a screenshot of a webpage.\n *\n * @example\n *   const { generate } = require(\"apyhub\");\n *\n *   const screenshot = async () => {\n *     const data = await generate.screenshot({\n *       responseFormat: \"url\",\n *       input: \"https://apyhub.com\",\n *       delay: 5,\n *       quality: 3,\n *       output: \"screenshot.png\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the screenshot generation.\n * @param {string} params.input - The URL of the webpage to take a screenshot\n *   of.\n * @param {string} [params.output] - The desired file name for the output\n *   screenshot image.\n * @param {number} [params.delay] - The delay, in seconds, before taking the\n *   screenshot.\n * @param {1 | 2 | 3 | 4 | 5} [params.quality] - The quality of the screenshot\n *   image.\n * @param {\"file\" | \"url\"} params.responseFormat - The desired response format.\n * @returns {Promise<{ data: string }>} - A promise that resolves with an object\n *   containing the resulting screenshot image file or URL as a string.\n * @link https://apyhub.com/utility/generate-webpage-screenshot\n */\nasync function screenshot({\n  input,\n  output,\n  delay,\n  quality,\n  responseFormat,\n}: {\n  input: string;\n  output?: string;\n  delay?: number;\n  quality?: 1 | 2 | 3 | 4 | 5;\n  responseFormat: \"file\" | \"url\";\n}): Promise<{ data: string }> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n  quality &&\n    checkParamTypes(\n      { quality: quality?.toString() },\n      [1, 2, 3, 4, 5].map((i) => i.toString())\n    );\n\n  const url = `\n        https://api.apyhub.com/generate/screenshot/webpage/image-${responseFormat}?output=${\n    output ?? \"output.png\"\n  }&delay=${delay ?? 3}&quality=${quality ?? 5}&url=${input}`;\n\n  return await client.request(\"get\", url);\n}\n\nexport { screenshot };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\n\n/**\n * Generates a chart image from data and chart options.\n *\n * @example\n *   const { charts } = require(\"apyhub\");\n *\n *   const data = [\n *     { value: 10, label: \"A\" },\n *     { value: 20, label: \"B\" },\n *     { value: 30, label: \"C\" },\n *     { value: 40, label: \"D\" },\n *   ];\n *\n *   charts({\n *     responseFormat: \"file\",\n *     chartType: \"bar\",\n *     output: \"chart.png\",\n *     title: \"My Chart\",\n *     theme: \"light\",\n *     data,\n *   }).then((res) => {\n *     console.log(res);\n *   });\n *\n * @param {Object} options - The options object.\n * @param {\"file\" | \"url\"} options.responseFormat - The format in which the\n *   chart should be returned. Valid values are \"url\" or \"file\".\n * @param {\"bar\" | \"pie\" | \"stacked\"} options.chartType - The type of chart to\n *   generate. Valid values are \"bar\", \"pie\" or \"stacked\".\n * @param {string} [options.output] - The file path where the chart should be\n *   saved. This parameter is only used if responseFormat is \"file\".\n * @param {string} [options.title] - The title of the chart.\n * @param {\"light\" | \"dark\"} [options.theme] - The theme of the chart. Valid\n *   values are \"light\" or \"dark\".\n * @param {{ value: number; label: string }[]} options.data - The data to be\n *   used to generate the chart.\n * @returns {Promise<{ data: string }>} A promise that resolves with the chart\n *   data if successful.\n * @link https://apyhub.com/utility/pie-chart\n * @link https://apyhub.com/utility/stacked-graph\n * @link https://apyhub.com/utility/bar-graph\n */\nasync function charts({\n  responseFormat,\n  chartType,\n  output,\n  title,\n  theme,\n  data,\n}: {\n  responseFormat: \"file\" | \"url\";\n  chartType: \"bar\" | \"pie\" | \"stacked\";\n  output?: string;\n  title?: string;\n  theme?: \"light\" | \"dark\";\n  data: Array<{ value: number; label: string }>;\n}): Promise<{ data: string }> {\n  const client = getInstance();\n\n  checkMissingParams({ responseFormat, chartType, data });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n  checkParamTypes({ chartType }, [\"bar\", \"pie\", \"stacked\"]);\n  theme && checkParamTypes({ theme }, [\"light\", \"dark\"]);\n\n  const url = `https://api.apyhub.com/generate/charts/${chartType}/${responseFormat}?output=${\n    output ?? \"output.png\"\n  }`;\n  const payload = {\n    ...(title && { title }),\n    ...(theme && { theme: theme[0].toUpperCase() + theme.slice(1) }),\n    data,\n  };\n  return await client.request(\"post\", url, payload);\n}\n\nexport { charts };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\n\n/**\n * Generates a PDF file from an HTML string or URL.\n *\n * @example\n *   const { generate } = require(\"apyhub\");\n *\n *   const pdf = async () => {\n *     const data = await generate.pdf({\n *       responseFormat: \"url\",\n *       input: \"https://apyhub.com\",\n *       landscape: true,\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the PDF generation.\n * @param {string} params.input - The HTML string or URL to generate the PDF\n *   from.\n * @param {\"url\" | \"file\"} params.responseFormat - The desired response format.\n * @param {boolean} [params.landscape] - Whether to generate the PDF in\n *   landscape orientation.\n * @returns {Promise<{ data: string }>} - A promise that resolves with an object\n *   containing the resulting PDF file or URL as a string.\n * @link https://apyhub.com/utility/generate-url-pdf\n * @link https://apyhub.com/utility/generate-html-pdf\n */\nasync function pdf({\n  input,\n  responseFormat,\n  landscape,\n}: {\n  input: string;\n  responseFormat: \"url\" | \"file\";\n  landscape?: boolean;\n}): Promise<{ data: string }> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  // check if input string is valid url without using isFileOrUrl\n  // TODO - move this to utils refactor isFileOrUrl to use this\n  const isUrl = (url: string): boolean => {\n    try {\n      const isValid = new URL(url);\n      return !!isValid;\n    } catch (error) {\n      return false;\n    }\n  };\n\n  const inputType = isUrl(input) ? \"webpage\" : \"html-content\";\n  const inputField = isUrl(input) ? \"url\" : \"content\";\n  const url = `https://api.apyhub.com/generate/${inputType}/pdf-${responseFormat}?&landscape=${\n    landscape === true ? \"true\" : \"false\"\n  }`;\n\n  console.log(url);\n\n  return await client.request(\"post\", url, { [inputField]: input });\n}\nexport { pdf };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\n/**\n * Generates an iCalendar file from a list of parameters.\n *\n * @example\n *   const { generate } = require(\"apyhub\");\n *\n *   const ical = async () => {\n *   const data = await generate.ical({\n *   responseFormat: \"url\",\n *   summary: \"Meeting\",\n *   description: \"Meeting description\",\n *   organizerEmail: \"your@mail.com\",\n *   attendeesEmails: [\"john@mail.com\", \"sally@mail.com\"],\n *   timeZone: \"America/New_York\",\n *   startTime: \"10:00\",\n *   endTime: \"11:00\",\n *   meetingDate: \"2020-01-01\",\n *   recurring: true,\n *   recurrence: {\n *   frequency: \"WEEKLY\",\n *   count: 5,\n *   },\n *   });\n *   return data;\n *\n * @param {Object} params - The parameters for the iCalendar file generation.\n * @param {\"file\" | \"url\"} params.responseFormat - The desired response format.\n * @param {string} params.summary - The meeting summary.\n * @param {string} params.description - The meeting description.\n * @param {string} params.organizerEmail - The meeting organizer's email\n *   address.\n * @param {string[]} params.attendeesEmails - The meeting attendees' email\n *   addresses.\n * @param {string} [params.location] - The meeting location.\n * @param {string} params.timeZone - The meeting time zone.\n * @param {string} params.startTime - The meeting start time.\n * @param {string} params.endTime - The meeting end time.\n * @param {string} params.meetingDate - The meeting date.\n * @param {boolean} params.recurring - Whether the meeting is recurring.\n * @param {Object} [params.recurrence] - The meeting recurrence parameters.\n * @param {string} [params.recurrence.frequency] - The meeting recurrence\n *   frequency.\n * @param {number} [params.recurrence.count] - The meeting recurrence count.\n * @returns {Promise<{ data: string }>} - A promise that resolves with an object\n *   containing the resulting iCalendar file or URL as a string.\n * @link https://apyhub.com/utility/generator-ical\n */\nasync function ical({\n  output,\n  responseFormat,\n  summary,\n  description,\n  organizerEmail,\n  attendeesEmails,\n  location,\n  timeZone,\n  startTime,\n  endTime,\n  meetingDate,\n  recurring,\n  recurrence,\n}: {\n  output?: string;\n  responseFormat: \"file\" | \"url\";\n  summary: string;\n  description: string;\n  organizerEmail: string;\n  attendeesEmails: string[];\n  location?: string;\n  timeZone: string;\n  startTime: string;\n  endTime: string;\n  meetingDate: string;\n  recurring?: boolean;\n  recurrence?: {\n    frequency: string;\n    count: number;\n  };\n}): Promise<{ data: string }> {\n  const client = getInstance();\n  checkMissingParams({\n    responseFormat,\n    summary,\n    description,\n    organizerEmail,\n    attendeesEmails,\n    timeZone,\n    startTime,\n    endTime,\n    meetingDate,\n  });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const url = `https://api.apyhub.com/generate/ical/${responseFormat}?output=${output ??\n    \"invite.ics\"}`;\n  return await client.request(\"post\", url, {\n    summary,\n    description,\n    organizer_email: organizerEmail,\n    attendees_email: attendeesEmails,\n    location,\n    time_zone: timeZone,\n    start_time: startTime,\n    end_time: endTime,\n    meeting_date: meetingDate,\n    recurring,\n    recurrence,\n  });\n}\n\nexport { ical };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Creates a thumbnail image from a file or URL.\n *\n * @example\n *   const { generate } = require(\"apyhub\");\n *\n *   const thumbnail = async () => {\n *     const data = await generate.thumbnail({\n *       responseFormat: \"url\",\n *       input: \"https://assets.apyhub.com/samples/sample.pdf\",\n *       width: 200,\n *       height: 200,\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the thumbnail creation.\n * @param {\"url\" | \"file\"} params.responseFormat - The desired response format.\n * @param {string} [params.output] - The desired file name for the output\n *   thumbnail.\n * @param {string | Buffer} params.input - The file or URL to create a thumbnail\n *   from.\n * @param {number} params.width - The desired width of the thumbnail.\n * @param {number} params.height - The desired height of the thumbnail.\n * @returns {Promise<{ data: string }>} - A promise that resolves with an object\n *   containing the resulting thumbnail file or URL as a string.\n * @link https://apyhub.com/utility/image-processor-thumbnail\n */\nasync function thumbnail({\n  input,\n  responseFormat,\n  output,\n  width,\n  height,\n}: {\n  input: string | Buffer;\n  responseFormat: \"url\" | \"file\";\n  output?: string;\n  width: number;\n  height: number;\n}): Promise<{ data: string } | undefined> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat, width, height });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const inputType = isFileOrUrl(input);\n  let endpoint = \"\";\n\n  if (inputType === \"file\" && responseFormat === \"file\") {\n    endpoint = \"file\";\n  } else if (inputType === \"file\" && responseFormat === \"url\") {\n    endpoint = \"file/url\";\n  } else if (inputType === \"url\" && responseFormat === \"file\") {\n    endpoint = \"url/file\";\n  } else if (inputType === \"url\" && responseFormat === \"url\") {\n    endpoint = \"file-urls\";\n  }\n\n  const requestUrl = `https://api.apyhub.com/generate/image/thumbnail/${endpoint}?output=${\n    output ?? \"thumbnail.png\"\n  }&width=${width}&height=${height}`;\n\n  return await client.request(\n    \"post\",\n    requestUrl,\n    inputType === \"file\" ? getFormData(input, \"image\") : { url: input }\n  );\n}\n\nexport { thumbnail };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\n\n/**\n * Extracts text from a webpage.\n *\n * @example\n *   const { extract } = require(\"apyhub\");\n *\n *   const textFromWebpage = async () => {\n *     const data = await extract.textFromWebpage(\"https://www.apyhub.com\");\n *     return data;\n *   };\n *\n * @param {string} url - The URL of the webpage.\n * @returns {Promise<{ data: string }>} A promise that resolves to the text for\n *   the webpage.\n * @link https://apyhub.com/utility/extractor-webpage-text\n */\nasync function textFromWebpage(url: string): Promise<{ data: string }> {\n  const client = getInstance();\n  checkMissingParams({ url });\n\n  const requestUrl = `https://api.apyhub.com/extract/text/webpage?url=${url}`;\n\n  return await client.request(\"get\", requestUrl);\n}\n\nexport { textFromWebpage };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Extracts text from a Word document.\n *\n * @example\n *   const { extract } = require(\"apyhub\");\n *\n *   const textFromWord = async () => {\n *     const data = await extract.textFromWord(\n *       \"https://assets.apyhub.com/samples/sample.docx\"\n *     );\n *     return data;\n *   };\n *\n * @param {string | Buffer} word - The Word document file or URL.\n * @returns {Promise<{ data: string }>} A promise that resolves to the text for\n *   the Word document.\n * @link https://apyhub.com/utility/extractor-word-text\n */\nasync function textFromWord(word: string | Buffer): Promise<{ data: string }> {\n  const client = getInstance();\n  checkMissingParams({ word });\n\n  const inputType = isFileOrUrl(word) === \"file\" ? \"file\" : \"url\";\n\n  const url = `https://api.apyhub.com/extract/text/word-${inputType}`;\n\n  return await client.request(\n    \"post\",\n    url,\n    inputType === \"file\" ? getFormData(word, \"file\") : { url: word }\n  );\n}\n\nexport { textFromWord };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Extracts text from a PDF file.\n *\n * @example\n *   const { extract } = require(\"apyhub\");\n *\n *   const textFromPdf = async () => {\n *     const data = await extract.textFromPdf(\n *       \"https://assets.apyhub.com/samples/sample.pdf\"\n *     );\n *     return data;\n *   };\n *\n * @param {string | Buffer} pdf - The PDF file or URL.\n * @returns {Promise<{ data: string }>} A promise that resolves to the text for\n *   the PDF.\n * @link https://apyhub.com/utility/extractor-pdf-text\n */\nasync function textFromPdf(pdf: string | Buffer): Promise<{ data: string }> {\n  const client = getInstance();\n  checkMissingParams({ pdf });\n\n  const inputType = isFileOrUrl(pdf) === \"file\" ? \"file\" : \"url\";\n\n  const url = `https://api.apyhub.com/extract/text/pdf-${inputType}`;\n  return await client.request(\n    \"post\",\n    url,\n    inputType === \"file\" ? getFormData(pdf, \"file\") : { url: pdf }\n  );\n}\n\nexport { textFromPdf };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Extracts metadata from an image.\n *\n * @example\n *   const { extract } = require(\"apyhub\");\n *\n *   const imageMetadata = async () => {\n *     const data = await extract.imageMetadata(\n *       \"https://assets.apyhub.com/samples/sample.jpg\"\n *     );\n *     return data;\n *   };\n *\n * @param {string | Buffer} image - The image file or URL.\n * @returns {Promise<{ data: string }>} A promise that resolves to the metadata\n *   for the image.\n * @link https://apyhub.com/utility/image-processor-extract-metadata\n */\nasync function imageMetadata(\n  image: string | Buffer\n): Promise<{ data: string }> {\n  const client = getInstance();\n  checkMissingParams({ image });\n\n  const inputType = isFileOrUrl(image) === \"file\" ? \"file\" : \"file-urls\";\n  // const contentType =\n  //   inputType === \"file\" ? \"multipart/form-data\" : \"application/json\";\n\n  const url = `https://api.apyhub.com/processor/image/metadata/${inputType}`;\n\n  return await client.request(\n    \"post\",\n    url,\n    inputType === \"file\" ? getFormData(image, \"image\") : { url: image }\n    // { headers: { \"Content-Type\": contentType } }\n  );\n}\n\nexport { imageMetadata };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Extracts the contents of an archive file (zip) to a list of files or URLs.\n * @example\n *\n * const { extract } = require(\"apyhub\");\n *\n * const unarchive = async () => {\n *  const data = await extract.unarchive({\n *   input: \"https://assets.apyhub.com/samples/sample.zip\",\n * });\n * return data;\n * };\n *\n * @param {Object} params - The parameters for the archive extraction.\n * @param {string | Buffer} params.input - The archive file or URL to extract.\n * @param {string} [params.password] - The password to use for secure extraction.\n *\n * @returns {Promise<{ data: Buffer }>} - A promise that resolves with an object containing the resulting extracted files or URLs as a Buffer.\n *\n * @link https://apyhub.com/utility/extract-file-unarchive\n * @link https://apyhub.com/utility/extract-file-secure-unarchive\n */\nexport async function unarchive({\n  input,\n  password,\n}: {\n  input: string | Buffer;\n  password?: string;\n}): Promise<{ data: Buffer }> {\n  const client = getInstance();\n  checkMissingParams({ input });\n\n  const inputType = isFileOrUrl(input) === \"file\" ? \"file\" : \"url\";\n\n  const url = `https://api.apyhub.com/extract/${\n    password ? \"secure-archive\" : \"archive\"\n  }/${inputType}/file-urls`;\n\n  const formData = () => {\n    const formData = getFormData(input, \"file\");\n    password && formData.append(\"password\", password);\n    return formData;\n  };\n\n  const data =\n    inputType === \"url\"\n      ? {\n          urls: input,\n          password: password ?? undefined,\n        }\n      : formData();\n\n  return await client.request(\"post\", url, data);\n}\n","import { getInstance } from \"../ApyClient\";\n\n/**\n * Retrieves a list of countries and their associated data.\n *\n * @example\n *   import { data } from \"apyhub\";\n *\n *   const countries = async () => {\n *     const data = await data.countries();\n *     return data;\n *   };\n *\n * @returns {Promise<\n *   {\n *     calling_codes: number[];\n *     cca3: string;\n *     emoji: string;\n *     key: string;\n *     value: string;\n *   }[]\n * >}\n *   - A promise that resolves with an array of country objects, each containing\n *       calling codes, cca3 code, emoji, key, and value properties.\n *\n * @link https://apyhub.com/utility/data-lists-country\n */\nasync function countries(): Promise<\n  Array<{\n    calling_codes: number[];\n    cca3: string;\n    emoji: string;\n    key: string;\n    value: string;\n  }>\n> {\n  const client = getInstance();\n  const url = `https://api.apyhub.com/data/dictionary/country`;\n  return await client.request(\"get\", url);\n}\n\nexport { countries };\n","import { getInstance } from \"../ApyClient\";\n\n/**\n * Retrieves information about a specific country.\n *\n * @example\n *   import { data } from \"apyhub\";\n *\n *   const country = () async => {\n *   const data = await data.country(\"United States\");\n *   return data;\n *   }\n *\n * @param {string} country - The name or cca3 code of the country.\n * @returns {Promise<{\n *   value: string;\n *   key: string;\n *   cca3: string;\n *   emoji: string;\n *   calling_code: number[];\n *   subdivision: { code: string; name: string }[];\n * }>}\n *   - A promise that resolves with an object containing the country's value, key,\n *       cca3 code, emoji, calling codes, and an array of subdivisions, each\n *       with a code and name.\n *\n * @link https://apyhub.com/utility/data-info-country\n */\nasync function country(country: string): Promise<{\n  value: string;\n  key: string;\n  cca3: string;\n  emoji: string;\n  calling_code: number[];\n  subdivision: Array<{\n    code: string;\n    name: string;\n  }>;\n}> {\n  const client = getInstance();\n  if (!country) {\n    throw new Error(\"Missing country\");\n  }\n  const url = `https://api.apyhub.com/data/info/country?country=${country}`;\n  return await client.request(\"get\", url);\n}\n\nexport { country };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\n\n/**\n * Converts an amount in one currency to another.\n *\n * @example\n *   import { data } from \"apyhub\";\n *\n *   const currencyConverter = async () => {\n *     const response = await data.currencyConverter({\n *       source: \"USD\",\n *       target: \"EUR\",\n *       date: \"2021-01-01\",\n *     });\n *     return response;\n *   };\n *\n * @param {Object} params - The parameters for the conversion.\n * @param {string} params.source - The source currency.\n * @param {string} params.target - The target currency.\n * @param {string} [params.date] - The date for the conversion (in the format\n *   \"YYYY-MM-DD\"). If not provided, the current date is used.\n * @returns {Promise<{ data: number }>} - A promise that resolves with an object\n *   containing the converted amount.\n * @link https://apyhub.com/utility/currency-conversion\n */\nasync function currencyConverter({\n  source,\n  target,\n  date,\n}: {\n  // TODO - add typescript types for all currencies\n  source: string;\n  target: string;\n  date?: string;\n}): Promise<{ data: number }> {\n  const client = getInstance();\n  checkMissingParams({ source, target });\n\n  const url = `https://api.apyhub.com/data/convert/currency`;\n\n  const body = {\n    source: source.toLowerCase(),\n    target: target.toLowerCase(),\n    date,\n  };\n\n  return await client.request(\"post\", url, body);\n}\n\nexport { currencyConverter };\n","import { getInstance } from \"../ApyClient\";\n\n/**\n * Retrieves a list of currencies and their associated data.\n *\n * @example\n *   import { data } from \"apy-client\";\n *\n *   const currencyList = async () => {\n *     const data = await data.currencyList();\n *     return data;\n *   };\n *\n * @returns {Promise<\n *   {\n *     calling_codes: number[];\n *     cca3: string;\n *     emoji: string;\n *     key: string;\n *     value: string;\n *   }[]\n * >}\n *   - A promise that resolves with an array of currency objects, each containing\n *       calling codes, cca3 code, emoji, key, and value properties.\n *\n * @link https://apyhub.com/utility/data-lists-currency\n */\nasync function currencyList(): Promise<\n  Array<{\n    calling_codes: number[];\n    cca3: string;\n    emoji: string;\n    key: string;\n    value: string;\n  }>\n> {\n  const client = getInstance();\n  const url = `https://api.apyhub.com/data/dictionary/currency`;\n  return await client.request(\"get\", url);\n}\nexport { currencyList };\n","import { getInstance } from \"../ApyClient\";\n\n/**\n * Retrieves a list of timezones and their associated data.\n *\n * @example\n *   import { data } from \"apy-client\";\n *\n *   const timezones = async () => {\n *     const data = await data.timezones();\n *     return data;\n *   };\n *\n * @returns {Promise<{\n *   data: {\n *     key: string;\n *     value: string;\n *     abbreviation: string[];\n *     utc_time: string;\n *   }[];\n * }>}\n *   - A promise that resolves with an object containing an array of timezone\n *       objects, each with a key, value, abbreviation, and utc_time property.\n *\n * @link https://apyhub.com/utility/data-lists-timezone\n */\nasync function timezones(): Promise<{\n  data: Array<{\n    key: string;\n    value: string;\n    abbreviation: string[];\n    utc_time: string;\n  }>;\n}> {\n  const client = getInstance();\n  const url = `https://api.apyhub.com/data/dictionary/timezone`;\n  return await client.request(\"get\", url);\n}\n\nexport { timezones };\n","function handleEndPointConvert(\n  input: string,\n  output: string,\n  inputType: string,\n  responseFormat: string\n): string {\n  if (inputType === \"file\" && responseFormat === \"file\") {\n    return `${input}-file/${output}-file`;\n  } else if (inputType === \"file\" && responseFormat === \"url\") {\n    return `${input}-file/${output}-url`;\n  } else if (inputType === \"url\" && responseFormat === \"file\") {\n    return `${input}-url/${output}-file`;\n  } else if (inputType === \"url\" && responseFormat === \"url\") {\n    return `${input}-url/${output}-url`;\n  }\n  return \"\";\n}\n\nexport { handleEndPointConvert };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { handleEndPointConvert } from \"../utils/handleEndpointConvert\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Converts a CSV file or URL to an Excel file.\n *\n * @example\n *   const { convert } = require(\"apyhub\");\n *\n *   const csvToExcel = async () => {\n *     const data = await convert.csvToExcel({\n *       input: \"https://assets.apyhub.com/samples/sample.csv\",\n *       responseFormat: \"url\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the conversion.\n * @param {string | Buffer} params.input - The CSV file or URL.\n * @param {\"url\" | \"file\"} params.responseFormat - The format for the response.\n * @param {string} [params.output] - The name for the output Excel file.\n * @returns {Promise<{ data: string } | undefined>} A promise that resolves to\n *   the data for the output file or `undefined` if the response format is not\n *   \"url\".\n * @link https://apyhub.com/utility/converter-csv-excel\n */\nasync function csvToExcel({\n  input,\n  responseFormat,\n  output,\n}: {\n  input: string | Buffer;\n  responseFormat: \"url\" | \"file\";\n  output?: string;\n}): Promise<{ data: string } | undefined> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const inputType = isFileOrUrl(input);\n\n  const requestUrl = `https://api.apyhub.com/convert/${handleEndPointConvert(\n    \"csv\",\n    \"excel\",\n    inputType,\n    responseFormat\n  )}?output=${output ?? \"output.xlsx\"}`;\n\n  return await client.request(\n    \"post\",\n    requestUrl,\n    inputType === \"file\" ? getFormData(input, \"file\") : { url: input }\n  );\n}\n\nexport { csvToExcel };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { handleEndPointConvert } from \"../utils/handleEndpointConvert\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Converts an HTML file or URL to a PDF file.\n *\n * @example\n *   const { convert } = require(\"apyhub\");\n *\n *   const htmlToPdf = async () => {\n *     const data = await convert.htmlToPdf({\n *       input: \"https://assets.apyhub.com/samples/sample.html\",\n *       responseFormat: \"url\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the conversion.\n * @param {string | Buffer} params.input - The HTML file or URL.\n * @param {\"url\" | \"file\"} params.responseFormat - The format for the response.\n * @param {string} [params.output] - The name for the output PDF file.\n * @returns {Promise<{ data: string } | undefined>} A promise that resolves to\n *   the data for the output file or `undefined` if the response format is not\n *   \"url\".\n * @link https://apyhub.com/utility/converter-html-pdf\n */\nasync function htmlToPdf({\n  input,\n  responseFormat,\n  output,\n}: {\n  input: string | Buffer;\n  responseFormat: \"url\" | \"file\";\n  output?: string;\n}): Promise<{ data: string } | undefined> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const inputType = isFileOrUrl(input);\n\n  const requestUrl = `https://api.apyhub.com/convert/${handleEndPointConvert(\n    \"html\",\n    \"pdf\",\n    inputType,\n    responseFormat\n  )}?output=${output ?? \"output.pdf\"}`;\n\n  return await client.request(\n    \"post\",\n    requestUrl,\n    inputType === \"file\" ? getFormData(input, \"file\") : { url: input }\n  );\n}\n\nexport { htmlToPdf };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { handleEndPointConvert } from \"../utils/handleEndpointConvert\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Converts an image file or URL to a PDF file.\n *\n * @example\n *   const { convert } = require(\"apyhub\");\n *\n *   const imageToPdf = async () => {\n *     const data = await convert.imageToPdf({\n *       input: \"https://assets.apyhub.com/samples/sample.jpg\",\n *       responseFormat: \"url\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the conversion.\n * @param {string | Buffer} params.input - The image file or URL.\n * @param {\"url\" | \"file\"} params.responseFormat - The format for the response.\n * @param {string} [params.output] - The name for the output PDF file.\n * @returns {Promise<{ data: string } | undefined>} A promise that resolves to\n *   the data for the output file or `undefined` if the response format is not\n *   \"url\".\n * @link https://apyhub.com/utility/converter-image-pdf\n */\nasync function imageToPdf({\n  input,\n  responseFormat,\n  output,\n}: {\n  input: string | Buffer;\n  responseFormat: \"url\" | \"file\";\n  output?: string;\n}): Promise<{ data: string } | undefined> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const inputType = isFileOrUrl(input);\n\n  const requestUrl = `https://api.apyhub.com/convert/${handleEndPointConvert(\n    \"image\",\n    \"pdf\",\n    inputType,\n    responseFormat\n  )}?output=${output ?? \"output.pdf\"}`;\n\n  return await client.request(\n    \"post\",\n    requestUrl,\n    inputType === \"file\" ? getFormData(input, \"file\") : { url: input }\n  );\n}\n\nexport { imageToPdf };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { handleEndPointConvert } from \"../utils/handleEndpointConvert\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Convert markdown to HTML.\n *\n * This function converts the given markdown input to HTML and returns the\n * result.\n *\n * @example\n *   const { convert } = require(\"apyhub\");\n *\n *   const markdownToHtml = async () => {\n *     const data = await convert.markdownToHtml({\n *       input: \"# Hello World\",\n *       responseFormat: \"url\",\n *     });\n *   };\n *\n * @param {Object} params - The parameters for the conversion.\n * @param {string | Buffer} params.input - The markdown input.\n * @param {\"url\" | \"file\"} params.responseFormat - The format of the response.\n *   Can be \"url\" or \"file\".\n * @param {string} [params.output] - The name of the output file.\n * @returns {Promise<{ data: string } | undefined>} - A promise that resolves\n *   with the HTML output.\n * @link https://apyhub.com/utility/converter-md-html\n */\nasync function markdownToHtml({\n  input,\n  responseFormat,\n  output,\n}: {\n  input: string | Buffer;\n  responseFormat: \"url\" | \"file\";\n  output?: string;\n}): Promise<{ data: string } | undefined> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const inputType = isFileOrUrl(input);\n\n  const requestUrl = `https://api.apyhub.com/convert/${handleEndPointConvert(\n    \"md\",\n    \"html\",\n    inputType,\n    responseFormat\n  )}?output=${output ?? \"output.html\"}`;\n\n  return await client.request(\n    \"post\",\n    requestUrl,\n    inputType === \"file\" ? getFormData(input, \"file\") : { url: input }\n  );\n}\n\nexport { markdownToHtml };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { handleEndPointConvert } from \"../utils/handleEndpointConvert\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Convert a presentation to PDF.\n *\n * This function converts the given presentation input to PDF and returns the\n * result.\n *\n * @example\n *   const { convert } = require(\"apyhub\");\n *\n *   const presentationToPdf = async () => {\n *     const data = await convert.presentationToPdf({\n *       input: \"https://assets.apyhub.com/samples/sample.pptx\",\n *       responseFormat: \"url\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the conversion.\n * @param {string | Buffer} params.input - The presentation input.\n * @param {\"url\" | \"file\"} params.responseFormat - The format of the response.\n *   Can be \"url\" or \"file\".\n * @param {string} [params.output] - The name of the output file.\n * @returns {Promise<{ data: string } | undefined>} - A promise that resolves\n *   with the PDF output.\n * @link https://apyhub.com/utility/converter-presentation-pdf\n */\nasync function presentationToPdf({\n  input,\n  responseFormat,\n  output,\n}: {\n  input: string | Buffer;\n  responseFormat: \"url\" | \"file\";\n  output?: string;\n}): Promise<{ data: string } | undefined> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const inputType = isFileOrUrl(input);\n\n  const requestUrl = `https://api.apyhub.com/convert/${handleEndPointConvert(\n    \"presentation\",\n    \"pdf\",\n    inputType,\n    responseFormat\n  )}?output=${output ?? \"output.pdf\"}`;\n\n  return await client.request(\n    \"post\",\n    requestUrl,\n    inputType === \"file\" ? getFormData(input, \"file\") : { url: input }\n  );\n}\n\nexport { presentationToPdf };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { handleEndPointConvert } from \"../utils/handleEndpointConvert\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Converts a spreadsheet file or URL to a PDF file.\n *\n * @example\n *   const { convert } = require(\"apyhub\");\n *\n *   const spreadsheetToPdf = async () => {\n *     const data = await convert.spreadsheetToPdf({\n *       input: \"https://assets.apyhub.com/samples/sample.xlsx\",\n *       responseFormat: \"url\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the conversion.\n * @param {string | Buffer} params.input - The file or URL to convert.\n * @param {\"url\" | \"file\"} params.responseFormat - The desired response format.\n * @param {string} [params.output] - The desired file name for the output PDF.\n * @returns {Promise<{ data: string } | undefined>} - A promise that resolves\n *   with the resulting PDF file or URL as a string, or undefined if the\n *   conversion failed.\n * @link https://apyhub.com/utility/converter-spreadsheet-pdf\n */\nasync function spreadsheetToPdf({\n  input,\n  responseFormat,\n  output,\n}: {\n  input: string | Buffer;\n  responseFormat: \"url\" | \"file\";\n  output?: string;\n}): Promise<{ data: string } | undefined> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const inputType = isFileOrUrl(input);\n\n  const requestUrl = `https://api.apyhub.com/convert/${handleEndPointConvert(\n    \"spreadsheet\",\n    \"pdf\",\n    inputType,\n    responseFormat\n  )}?output=${output ?? \"output.pdf\"}`;\n\n  return await client.request(\n    \"post\",\n    requestUrl,\n    inputType === \"file\" ? getFormData(input, \"file\") : { url: input }\n  );\n}\n\nexport { spreadsheetToPdf };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { handleEndPointConvert } from \"../utils/handleEndpointConvert\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Converts a Word file or URL to a PDF file.\n *\n * @example\n *   const { convert } = require(\"apyhub\");\n *\n *   const wordToPdf = async () => {\n *     const data = await convert.wordToPdf({\n *       input: \"https://assets.apyhub.com/samples/sample.docx\",\n *       responseFormat: \"url\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the conversion.\n * @param {string | Buffer} params.input - The file or URL to convert.\n * @param {\"url\" | \"file\"} params.responseFormat - The desired response format.\n * @param {string} [params.output] - The desired file name for the output PDF.\n * @returns {Promise<{ data: string } | undefined>} - A promise that resolves\n *   with the resulting PDF file or URL as a string, or undefined if the\n *   conversion failed.\n * @link https://apyhub.com/utility/converter-doc-pdf\n */\nasync function wordToPdf({\n  input,\n  responseFormat,\n  output,\n}: {\n  input: string | Buffer;\n  responseFormat: \"url\" | \"file\";\n  output?: string;\n}): Promise<{ data: string } | undefined> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const inputType = isFileOrUrl(input);\n\n  const requestUrl = `https://api.apyhub.com/convert/${handleEndPointConvert(\n    \"word\",\n    \"pdf\",\n    inputType,\n    responseFormat\n  )}?output=${output ?? \"output.pdf\"}`;\n\n  return await client.request(\n    \"post\",\n    requestUrl,\n    inputType === \"file\" ? getFormData(input, \"file\") : { url: input }\n  );\n}\n\nexport { wordToPdf };\n","import * as fs from \"fs\";\nimport fetch from \"cross-fetch\";\n\nfunction isValidUrl(url: string): boolean {\n  try {\n    const isValid = new URL(url);\n    return !!isValid;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Downloads data to the specified file path.\n *\n * @param {| Blob\n *   | string\n *   | {\n *       data: string;\n *       type?: string;\n *       arrayBuffer?: () => Promise<ArrayBuffer>;\n *     }} data\n *   - The data to download. Can be a Blob, a string, or an object with a `data`\n *       property and optionally a `type` property and an `arrayBuffer` function\n *       that returns a Promise for an ArrayBuffer.\n *\n * @param {string} filePath - The file path to save the downloaded data to.\n * @returns {Promise<void>} A Promise that resolves when the download is\n *   complete.\n * @throws {Error} If the data is invalid or there is an error writing the file.\n */\n\n// TODO : fix this type for data\n// | Blob\n//     | string\n//     | { data: string; type?: string; arrayBuffer?: () => Promise<ArrayBuffer> }\n\nexport async function download(data: any, filePath: string): Promise<void> {\n  let buffer: Buffer = Buffer.alloc(0);\n  if (typeof data === \"string\") {\n    buffer = Buffer.from(data);\n  } else if (typeof data === \"object\" && data.data) {\n    if (isValidUrl(data.data)) {\n      const response = await fetch(data.data);\n      buffer = Buffer.from(await response.arrayBuffer());\n    } else if (typeof data.data === \"string\") {\n      buffer = Buffer.from(data.data);\n    } else if (\"data\" in data && typeof data.data === \"object\") {\n      buffer = Buffer.from(JSON.stringify(data.data));\n    } else {\n      throw new Error(\"Invalid data.data\");\n    }\n  } else if (\n    typeof data === \"object\" &&\n    data.type &&\n    typeof data.arrayBuffer === \"function\"\n  ) {\n    buffer = Buffer.from(await data.arrayBuffer());\n  } else {\n    throw new Error(\"Invalid data\");\n  }\n\n  fs.writeFile(filePath, buffer, (err) => {\n    if (err) {\n      throw err;\n    }\n  });\n}\n"],"names":["ApyClient","apyToken","options","headers","username","password","Authorization","Buffer","from","toString","debug","requestQueue","rateLimit","rateLimitPeriod","rateLimitTimer","requestPromises","debugRequest","method","url","data","request","Request","body","console","log","Error","push","requestPromise","Promise","resolve","startRateLimiter","setTimeout","processRequestQueue","requests","splice","i","length","response","fetch","FormData","JSON","stringify","handleResponse","reject","ok","text","error","errorCode","status","contentType","get","blobTypes","Set","handleBlob","responseData","blob","handleText","handleJson","json","includes","has","instance","getInstance","initApyhub","fuzzy","source","target","unicodeNormalized","client","requestUrl","checkMissingParams","params","missingParams","Object","entries","filter","value","errorMessage","map","key","join","checkParamTypes","values","stringValues","invalidParams","email","checkType","postcode","countryCode","toLowerCase","vat","getFileExtension","buffer","slice","getFormData","file","fieldName","formData","f","absoluteFilePath","path","fileBuffer","fs","append","filename","getFile","filePath","handleEndPoint","type","inputType","responseFormat","isFileOrUrl","input","match","crop","height","width","output","resize","compress","quality","watermark","imageUrl","watermarkUrl","archive","endpoint","responseType","urls","undefined","barcode","content","qr","screenshot","delay","charts","chartType","title","theme","payload","toUpperCase","pdf","landscape","isUrl","isValid","URL","inputField","ical","summary","description","organizerEmail","attendeesEmails","location","timeZone","startTime","endTime","meetingDate","recurring","recurrence","organizer_email","attendees_email","time_zone","start_time","end_time","meeting_date","thumbnail","textFromWebpage","textFromWord","word","textFromPdf","imageMetadata","image","unarchive","countries","country","currencyConverter","date","currencyList","timezones","handleEndPointConvert","csvToExcel","htmlToPdf","imageToPdf","markdownToHtml","presentationToPdf","spreadsheetToPdf","wordToPdf","isValidUrl","download","alloc","arrayBuffer","err"],"mappings":"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"}