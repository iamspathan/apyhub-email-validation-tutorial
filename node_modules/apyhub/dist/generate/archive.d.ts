/// <reference types="node" />
/**
 * Creates an archive file (zip) from a list of files or URLs.
 *
 * @example
 *   const { generate } = require("apyhub");
 *
 *   const archive = async () => {
 *     const data = await generate.archive({
 *       responseFormat: "url",
 *       input: [
 *         "https://assets.apyhub.com/samples/sample.pdf",
 *         "https://assets.apyhub.com/samples/sample.xlsx",
 *       ],
 *     });
 *     return data;
 *   };
 *
 * @example
 *   const { generate } = require("apyhub");
 *
 *   const secureArchive = async () => {
 *     const data = await generate.archive({
 *       responseFormat: "url",
 *       input: [
 *         "https://assets.apyhub.com/samples/sample.pdf",
 *         "https://assets.apyhub.com/samples/sample.xlsx",
 *       ],
 *       password: "password",
 *     });
 *     return data;
 *   };
 *
 * @param {Object} params - The parameters for the archive creation.
 * @param {"url" | "file"} params.responseFormat - The desired response format.
 * @param {string} [params.output] - The desired file name for the output
 *   archive.
 * @param {string[] | Buffer[]} params.input - The list of files or URLs to
 *   archive.
 * @param {string} [params.password] - The password to use for secure archiving.
 * @returns {Promise<{ data: string }>} - A promise that resolves with an object
 *   containing the resulting archive file or URL as a string.
 * @link https://apyhub.com/utility/generate-file-archive
 * @link https://apyhub.com/utility/generate-secure-file-archive
 */
declare function archive({ responseFormat, output, input, password, }: {
    responseFormat: "url" | "file";
    output?: string;
    input: string[] | Buffer[];
    password?: string;
}): Promise<{
    data: string;
}>;
export { archive };
