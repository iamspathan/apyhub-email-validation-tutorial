{"version":3,"file":"apyhub.cjs.production.min.js","sources":["../src/ApyClient.ts","../src/search/fuzzy.ts","../src/utils/checkMissingParams.ts","../src/utils/checkParamsTypes.ts","../src/validate/email.ts","../src/validate/postcode.ts","../src/validate/vat.ts","../src/utils/getFormData.ts","../src/utils/getFileExtension.ts","../src/utils/handleEndpoint.ts","../src/utils/isFileOrUrl.ts","../src/imageProcessor/crop.ts","../src/imageProcessor/resize.ts","../src/imageProcessor/compress.ts","../src/imageProcessor/watermark.ts","../src/generate/archive.ts","../src/generate/barcode.ts","../src/generate/qr.ts","../src/generate/screenshot.ts","../src/generate/charts.ts","../src/generate/pdf.ts","../src/generate/ical.ts","../src/generate/thumbnail.ts","../src/extract/textFromWebpage.ts","../src/extract/textFromWord.ts","../src/extract/textFromPdf.ts","../src/extract/imageMetadata.ts","../src/extract/unarchive.ts","../src/data/countries.ts","../src/data/country.ts","../src/data/currencyConverter.ts","../src/data/currencyList.ts","../src/data/timezones.ts","../src/utils/handleEndpointConvert.ts","../src/convert/csvToExcel.ts","../src/convert/htmlToPdf.ts","../src/convert/imageToPdf.ts","../src/convert/markdownToHtml.ts","../src/convert/presentationToPdf.ts","../src/convert/spreadsheetToPdf.ts","../src/convert/wordToPdf.ts","../src/utils/download.ts"],"sourcesContent":["import fetch, { Request } from \"cross-fetch\";\nimport FormData from \"form-data\";\n\nclass ApyClient {\n  protected readonly baseUrl = \"https://api.apyhub.com\";\n  protected readonly headers: any;\n  private readonly requestQueue: any[];\n  private readonly rateLimit: 1 | 2 | 3 | 4 | 5;\n  private readonly rateLimitPeriod: number;\n  private rateLimitTimer: any;\n  private requestPromises: any[];\n  protected debug: boolean;\n\n  constructor(\n    apyToken:\n      | string\n      | {\n          username: string;\n          password: string;\n        },\n    options?: { rateLimit: 1 | 2 | 3 | 4 | 5; debug: boolean }\n  ) {\n    this.headers =\n      typeof apyToken === \"string\"\n        ? {\n            \"apy-token\": apyToken,\n          }\n        : typeof apyToken === \"object\" &&\n          apyToken.username &&\n          apyToken.password && {\n            Authorization: `Basic ${Buffer.from(\n              `${apyToken.username}:${apyToken.password}`\n            ).toString(\"base64\")}`,\n          };\n    this.debug = options?.debug ?? false;\n    this.requestQueue = [];\n    this.rateLimit = options?.rateLimit ?? 1;\n    this.rateLimitPeriod = 1000; // Set the rate limit period to 1 second (1000 milliseconds)\n    this.rateLimitTimer = null;\n    this.requestPromises = [];\n  }\n\n  private debugRequest(method: string, url: string, data?: any): void {\n    const request = new Request(url, {\n      method,\n      headers: this.headers,\n      body: data,\n    });\n    console.log(request);\n  }\n\n  async request(\n    method: \"get\" | \"post\",\n    url: string,\n    data?: any,\n    options: any = {}\n  ): Promise<any> {\n    if (!this.headers[\"apy-token\"] && !this.headers[\"Authorization\"]) {\n      throw new Error(\"Basic Authorization or Token is required\");\n    }\n    const headers = { ...this.headers, ...options.headers };\n\n    if (this.debug) {\n      this.debugRequest(method, url, data);\n    }\n\n    // Push the request to the request queue\n    this.requestQueue.push({ method, url, data, headers });\n\n    // Create a new promise to store the request response\n    const requestPromise = new Promise((resolve) => {\n      // Push the promise to the requestPromises array\n      this.requestPromises.push(resolve);\n    });\n\n    // Check if the rate limit timer is running\n    if (this.rateLimitTimer) {\n      // If the timer is running, do nothing\n      return await requestPromise;\n    }\n\n    // Start the rate limiter\n    this.startRateLimiter();\n\n    return await requestPromise;\n  }\n\n  private startRateLimiter(): void {\n    // Start the rate limit timer\n    this.rateLimitTimer = setTimeout(() => {\n      // Reset the timer\n      this.rateLimitTimer = null;\n\n      // Process the request queue\n      void this.processRequestQueue();\n    }, this.rateLimitPeriod);\n  }\n\n  private async processRequestQueue(): Promise<void> {\n    // Take the first n requests from the queue, where n is the rate limit\n    const requests = this.requestQueue.splice(0, this.rateLimit);\n\n    // Process the requests\n    for (let i = 0; i < requests.length; i++) {\n      const request = requests[i];\n      try {\n        let response: any;\n        switch (request.method) {\n          case \"get\":\n            response = await fetch(request.url, {\n              method: \"GET\",\n              headers: request.headers,\n            });\n            break;\n          case \"post\":\n            response = await fetch(request.url, {\n              method: \"POST\",\n              headers: request.headers,\n              body:\n                request.data instanceof FormData\n                  ? request.data\n                  : JSON.stringify(request.data),\n            });\n            break;\n        }\n        // Resolve the corresponding request promise with the response\n        this.requestPromises[i](await this.handleResponse(response));\n      } catch (error) {\n        // Reject the corresponding request promise with the error message\n        this.requestPromises[i](Promise.reject(error));\n      }\n    }\n\n    // Clear the requestPromises array\n    this.requestPromises = [];\n\n    // Check if there are any more requests in the queue\n    if (this.requestQueue.length > 0) {\n      // If there are more requests, start the rate limiter again\n      this.startRateLimiter();\n    }\n  }\n\n  private async handleResponse(response: Response): Promise<any> {\n    if (this.debug) {\n      console.log(response);\n    }\n    if (!response.ok) {\n      const error = await response.text();\n      const errorCode = response.status;\n      throw new Error(`${errorCode}: ${error}`);\n    }\n    const contentType = response.headers.get(\"Content-Type\") ?? \"\";\n    const blobTypes = new Set([\n      \"image/png\",\n      \"image/jpeg\",\n      \"application/zip\",\n      \"application/pdf\",\n    ]);\n\n    const handleBlob = async (responseData: Response): Promise<Blob> =>\n      await responseData.blob();\n    const handleText = async (\n      responseData: Response\n    ): Promise<string | undefined> => await responseData.text();\n    const handleJson = async (\n      responseData: Response\n    ): Promise<Record<string, any> | undefined> => await responseData.json();\n\n    switch (true) {\n      case contentType.includes(\"text/plain\"):\n      case contentType.includes(\"text/html\"):\n        return await handleText(response);\n      default:\n        return blobTypes.has(contentType)\n          ? await handleBlob(response)\n          : await handleJson(response);\n    }\n  }\n}\n\nlet instance: ApyClient | null = null;\n\n// getInstance with ApyClientParams\nfunction getInstance(\n  apyToken?:\n    | string\n    | {\n        username: string;\n        password: string;\n      },\n  options?: {\n    rateLimit: 1 | 2 | 3 | 4 | 5;\n    debug: boolean;\n  }\n): ApyClient {\n  if (!instance) {\n    if (!apyToken) {\n      throw new Error(\"Basic Authorization or Token is required\");\n    }\n    instance = new ApyClient(apyToken, options);\n  }\n  return instance;\n}\n\n/**\n * Initializes the Apyhub API client.\n *\n * @param {string} apyToken - The Apyhub API token or Basic Authorization\n *   credentials.\n * @param {Object} [options] - Options for the API client.\n * @param {1 | 2 | 3 | 4 | 5} [options.rateLimit] - The rate limit for the API\n *   client.\n */\nfunction initApyhub(\n  apyToken:\n    | string\n    | {\n        username: string;\n        password: string;\n      },\n  options?: {\n    rateLimit: 1 | 2 | 3 | 4 | 5;\n    debug: boolean;\n  }\n): void {\n  getInstance(apyToken, options);\n}\n\nexport { initApyhub, getInstance };\n","import { getInstance } from \"../ApyClient\";\n\n/**\n * Fuzzy search.\n *\n * @example\n *   const { search } = require(\"apyhub\");\n *\n *   const fuzzy = async () => {\n *     const data = await search.fuzzy({\n *       source: \"taching\",\n *       target: \"teaching is the best qualifying compare another profession\",\n *       unicodeNormalized: false,\n *     });\n *     return data;\n *   };\n *\n * @param {Object} options - The options for the function.\n * @param {string} options.source - The source text.\n * @param {string} options.target - The target text.\n * @param {boolean} [options.unicodeNormalized] - Whether the text is unicode\n *   normalized. Default is false.\n * @returns {Promise<{ data: string } | undefined>} - A promise that resolves to\n *   an object with the fuzzy search result, or undefined if the response format\n *   is invalid.\n * @link https://apyhub.com/utility/search-fuzzy-text\n */\nasync function fuzzy({\n  source,\n  target,\n  unicodeNormalized = false,\n}: {\n  source: string;\n  target: string;\n  unicodeNormalized?: boolean;\n}): Promise<{ data: string[] } | undefined> {\n  const client = getInstance();\n\n  const requestUrl = `https://api.apyhub.com/search/text/fuzzy?unicode-normalized=${unicodeNormalized.toString()}`;\n\n  // return empty array if source or target is empty string\n  if (!source || !target) {\n    return { data: [] };\n  }\n\n  return await client.request(\n    \"post\",\n    requestUrl,\n    {\n      source,\n      target,\n    },\n    { headers: { \"Content-Type\": \"application/json\" } }\n  );\n}\n\nexport { fuzzy };\n","export const checkMissingParams = (params: Record<string, any>): void => {\n  const missingParams = Object.entries(params).filter(([, value]) => !value);\n  if (missingParams.length > 0) {\n    const errorMessage = `Missing parameters: ${missingParams\n      .map(([key]) => key)\n      .join(\", \")}`;\n    throw new Error(errorMessage);\n  }\n};\n","export const checkParamTypes = (\n  params: Record<string, any>,\n  values: string | string[]\n): void => {\n  // check if the `values` parameter is a string or an array of strings\n  const stringValues = typeof values === \"string\" ? [values] : values;\n\n  // check if all the values in `params` are strings and are equal to one of the values in `values`\n  const invalidParams = Object.entries(params).filter(\n    ([, value]) => typeof value !== \"string\" || !stringValues.includes(value)\n  );\n\n  if (invalidParams.length > 0) {\n    const errorMessage = `Invalid parameters: ${invalidParams\n      .map(([key]) => key)\n      .join(\", \")}. \\nSupported values are: ${stringValues.join(\", \")}`;\n    throw new Error(errorMessage);\n  }\n};\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\n\n/**\n * Validates an email address.\n *\n * @example\n *   const { validate } = require(\"apyhub\");\n *\n *   const email = async () => {\n *     const data = await validate.email({\n *       email: \"hello@apyhub.com\",\n *       checkType: \"dns\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} options - The options for the function.\n * @param {string} options.email - The email address to validate.\n * @param {\"dns\" | \"academic\"} options.checkType - The type of validation to\n *   perform. Can be either \"dns\" or \"academic\".\n * @returns {Promise<{ data: boolean }>} - A promise that resolves to an object\n *   with the validation result.\n * @link https://apyhub.com/utility/validator-dns-email\n * @link https://apyhub.com/utility/validator-academic-email\n */\nasync function email({\n  email,\n  checkType,\n}: {\n  email: string;\n  checkType: \"dns\" | \"academic\";\n}): Promise<{ data: boolean }> {\n  const client = getInstance();\n  checkMissingParams({ email, checkType });\n  checkParamTypes({ checkType }, [\"dns\", \"academic\"]);\n\n  const url = `https://api.apyhub.com/validate/email/${checkType}`;\n  return await client.request(\"post\", url, { email });\n}\n\nexport { email };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\n// generate jsdocs for the postcode validator\n\n/**\n * Validates a postcode.\n *\n * @example\n *   const { validate } = require(\"apyhub\");\n *\n *   const validatePostcode = async () => {\n *     const data = await validate.postcode({\n *       postcode: \"560037\",\n *       countryCode: \"in\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} options - The options for the function.\n * @param {string} options.postcode - The postcode to validate.\n * @param {\"in\" | \"uk\"} options.countryCode - The country code of the postcode.\n *   Can be either \"in\" or \"uk\".\n * @returns {Promise<{ data: boolean }>} - A promise that resolves to an object\n *   with the validation result.\n * @link https://apyhub.com/utility/data-postcodes-india\n * @link https://apyhub.com/utility/data-postcodes-uk\n */\nasync function postcode({\n  postcode,\n  countryCode,\n}: {\n  postcode: string;\n  countryCode: \"in\" | \"uk\";\n}): Promise<{ data: boolean }> {\n  const client = getInstance();\n  checkMissingParams({ postcode, countryCode });\n  checkParamTypes({ countryCode: countryCode.toLowerCase() }, [\"in\", \"uk\"]);\n\n  const url = `https://api.apyhub.com/validate/postcodes/${countryCode.toLowerCase()}`;\n  return await client.request(\"post\", url, { postcode });\n}\n\nexport { postcode };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\n\n// generate jsdocs for the vat validator\n\n/**\n * Validates a VAT number.\n *\n * @example\n *   const { validate } = require(\"apyhub\");\n *\n *   const validateVat = async () => {\n *     const data = await validate.vat({\n *       vat: \"GB123456789\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} options - The options for the function.\n * @param {string} options.vat - The VAT number to validate.\n * @returns {Promise<{ data: boolean }>} - A promise that resolves to an object\n *   with the validation result.\n * @link https://apyhub.com/utility/vat-number-validator\n */\nasync function vat(vat: string): Promise<{ data: boolean }> {\n  const client = getInstance();\n  checkMissingParams({ vat });\n  const url = `https://api.apyhub.com/validate/vat`;\n  return await client.request(\"post\", url, { vat });\n}\n\nexport { vat };\n","import * as fs from \"fs\";\nimport * as path from \"path\";\nimport FormData from \"form-data\";\nimport { getFileExtension } from \"./getFileExtension\";\n\nexport function getFormData(\n  file: string | Buffer | (string | Buffer)[],\n  fieldName: string\n): FormData {\n  const formData = new FormData();\n  if (typeof file === \"string\" || file instanceof Buffer) {\n    file = [file];\n  }\n  for (const f of file) {\n    if (typeof f === \"string\") {\n      const absoluteFilePath = path.resolve(f);\n      const fileBuffer = fs.readFileSync(absoluteFilePath);\n      formData.append(fieldName, fileBuffer, {\n        contentType: \"application/octet-stream\",\n        filename: path.basename(absoluteFilePath),\n      });\n    } else {\n      formData.append(fieldName, f, {\n        contentType: \"application/octet-stream\",\n        filename: `file.${getFileExtension(f)}`,\n      });\n    }\n  }\n  return formData;\n}\n\nexport function getFile(filePath: string): Buffer {\n  const absoluteFilePath = path.resolve(filePath);\n  const file = fs.readFileSync(absoluteFilePath);\n\n  return Buffer.from(file);\n}\n","export function getFileExtension(buffer: Buffer) {\n  // Check for the various file types we support.\n  if (buffer.slice(0, 4).toString() === \"%PDF\") {\n    return \"pdf\";\n  } else if (buffer.slice(0, 2).toString() === \"PK\") {\n    return \"docx\";\n  } else if (buffer.slice(0, 2).toString() === \"PK\") {\n    return \"pptx\";\n  } else if (buffer.slice(0, 2).toString() === \"PK\") {\n    return \"xlsx\";\n  } else if (buffer.slice(0, 5).toString() === \"<html\") {\n    return \"html\";\n  } else if (buffer.slice(0, 3).toString() === \"---\") {\n    return \"md\";\n  } else if (buffer.slice(0, 2).toString() === \"BM\") {\n    return \"jpg\";\n  } else if (buffer.slice(0, 3).toString() === \"GIF\") {\n    return \"jpg\";\n  } else if (buffer.slice(0, 3).toString() === \"PNG\") {\n    return \"jpg\";\n  } else if (buffer.slice(0, 4).toString() === \"\\x89PNG\") {\n    return \"jpg\";\n  } else if (buffer.slice(0, 4).toString() === \"\\xff\\xd8\\xff\\xe0\") {\n    return \"jpg\";\n  } else if (buffer.slice(0, 4).toString() === \"\\xff\\xd8\\xff\\xe1\") {\n    return \"jpg\";\n  } else if (buffer.slice(0, 4).toString() === \"ID\\x01\\x02\") {\n    return \"csv\";\n  }\n  // If the file type isn't recognized, return null.\n  return null;\n}\n","export function handleEndPoint(\n  type: string,\n  inputType: string,\n  responseFormat: string\n): string {\n  if (inputType === \"file\" && responseFormat === \"file\") {\n    return `${type}/file`;\n  } else if (inputType === \"file\" && responseFormat === \"url\") {\n    return `${type}/file/url${type === \"resize\" ? \"s\" : \"\"}`;\n  } else if (inputType === \"url\" && responseFormat === \"file\") {\n    return `${type}/url/file`;\n  } else if (inputType === \"url\" && responseFormat === \"url\") {\n    return `${type}/file-urls`;\n  }\n  return \"\";\n}\n","export function isFileOrUrl(input: string | Buffer): string {\n  if (input instanceof Buffer) {\n    return \"file\";\n  } else if (\n    input.match(\n      /^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/\n    )\n  ) {\n    return \"url\";\n  } else {\n    return \"file\";\n  }\n}\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { handleEndPoint } from \"../utils/handleEndpoint\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Crops an image file or URL.\n *\n * @example\n *   const { imageProcessor } = require(\"apyhub\");\n *\n *   const crop = async () => {\n *     const data = await imageProcessor.crop({\n *       responseFormat: \"url\",\n *       input: \"https://assets.apyhub.com/samples/sample.pdf\",\n *       height: 200,\n *       width: 200,\n *       output: \"output.png\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the image cropping.\n * @param {\"url\" | \"file\"} params.responseFormat - The desired response format.\n * @param {string | Buffer} params.input - The image file or URL to crop.\n * @param {number} params.height - The desired height of the cropped image.\n * @param {number} params.width - The desired width of the cropped image.\n * @param {string} [params.output] - The desired file name for the output\n *   cropped image.\n * @returns {Promise<{ data: string }>} - A promise that resolves with an object\n *   containing the resulting cropped image file or URL as a string.\n * @link https://apyhub.com/utility/image-processor-crop\n */\n\nasync function crop({\n  input,\n  responseFormat,\n  height,\n  width,\n  output,\n}: {\n  input: string | Buffer;\n  responseFormat: \"url\" | \"file\";\n  height: number;\n  width: number;\n  output?: string;\n}): Promise<{ data: string } | undefined> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat, height, width });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const inputType = isFileOrUrl(input);\n\n  const url = `https://api.apyhub.com/processor/image/${handleEndPoint(\n    \"crop\",\n    inputType,\n    responseFormat\n  )}?output=${output ?? \"output.png\"}&height=${height}&width=${width}`;\n\n  return await client.request(\n    \"post\",\n    url,\n    inputType === \"file\" ? getFormData(input, \"image\") : { url: input }\n  );\n}\n\nexport { crop };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { handleEndPoint } from \"../utils/handleEndpoint\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Resizes an image file or URL.\n *\n * @example\n *   const { imageProcessor } = require(\"apyhub\");\n *\n *   const resize = async () => {\n *     const data = await imageProcessor.resize({\n *       responseFormat: \"url\",\n *       input: \"https://assets.apyhub.com/samples/sample.pdf\",\n *       height: 200,\n *       width: 200,\n *       output: \"output.png\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the image resizing.\n * @param {\"url\" | \"file\"} params.responseFormat - The desired response format.\n * @param {string | Buffer} params.input - The image file or URL to resize.\n * @param {number} params.height - The desired height of the resized image.\n * @param {number} params.width - The desired width of the resized image.\n * @param {string} [params.output] - The desired file name for the output\n *   resized image.\n * @returns {Promise<{ data: string }>} - A promise that resolves with an object\n *   containing the resulting resized image file or URL as a string.\n * @link https://apyhub.com/utility/image-processor-resize\n */\n\nasync function resize({\n  input,\n  responseFormat,\n  height,\n  width,\n  output,\n}: {\n  input: string | Buffer;\n  responseFormat: \"url\" | \"file\";\n  height: number;\n  width: number;\n  output?: string;\n}): Promise<{ data: string } | undefined> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat, height, width });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const inputType = isFileOrUrl(input);\n\n  const requestUrl = `https://api.apyhub.com/processor/image/${handleEndPoint(\n    \"resize\",\n    inputType,\n    responseFormat\n  )}?output=${output ?? \"output.png\"}&height=${height}&width=${width}`;\n\n  return await client.request(\n    \"post\",\n    requestUrl,\n    inputType === \"file\" ? getFormData(input, \"image\") : { url: input }\n  );\n}\n\nexport { resize };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { handleEndPoint } from \"../utils/handleEndpoint\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Compresses an image file or URL.\n *\n * @example\n *   const { imageProcessor } = require(\"apyhub\");\n *\n *   const compress = async () => {\n *     const data = await imageProcessor.compress({\n *       responseFormat: \"url\",\n *       input: \"https://assets.apyhub.com/samples/sample.png\",\n *       quality: 50,\n *       output: \"compressed.png\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the image compression.\n * @param {\"url\" | \"file\"} params.responseFormat - The desired response format.\n * @param {string | Buffer} params.input - The image file or URL to compress.\n * @param {number} params.quality - The desired quality of the compressed image.\n * @param {string} [params.output] - The desired file name for the output\n *   compressed image.\n * @returns {Promise<{ data: string }>} - A promise that resolves with an object\n *   containing the resulting compressed image file or URL as a string.\n * @link https://apyhub.com/utility/image-processor-compress\n */\nasync function compress({\n  input,\n  responseFormat,\n  quality,\n  output,\n}: {\n  input: string | Buffer;\n  responseFormat: \"url\" | \"file\";\n  // TODO: add typescript support for quality > 1 && < 99\n  quality: number;\n  output?: string;\n}): Promise<{ data: string } | undefined> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat, quality });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const inputType = isFileOrUrl(input);\n\n  const requestUrl = `https://api.apyhub.com/processor/image/${handleEndPoint(\n    \"compress\",\n    inputType,\n    responseFormat\n  )}?output=${output ?? \"output.png\"}&quality=${quality}`;\n\n  return await client.request(\n    \"post\",\n    requestUrl,\n    inputType === \"file\" ? getFormData(input, \"image\") : { url: input }\n  );\n}\n\nexport { compress };\n","import FormData from \"form-data\";\nimport { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\nimport { getFile } from \"../utils/getFormData\";\nimport { handleEndPoint } from \"../utils/handleEndpoint\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Adds a watermark to an image.\n *\n * @example\n *   const { imageProcessor } = require(\"apyhub\");\n *\n *   const watermark = async () => {\n *     const data = await imageProcessor.watermark({\n *       input: \"https://assets.apyhub.com/samples/sample.pdf\",\n *       watermark: \"https://assets.apyhub.com/samples/sample.pdf\",\n *       responseFormat: \"url\",\n *       output: \"output.png\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} options - The options for the function.\n * @param {string | Buffer} options.input - The input image as a file path or\n *   URL, or as a Buffer if it is a file.\n * @param {string} options.watermark - The watermark image as a file path or\n *   URL, or as a Buffer if it is a file.\n * @param {\"url\" | \"file\"} options.responseFormat - The desired response format.\n *   Can be either \"url\" or \"file\".\n * @param {string | Buffer} [options.output] - The desired file name for the\n *   output image. Default is \"output.png\".\n * @returns {Promise<{ data: string } | undefined>} - A promise that resolves to\n *   an object with the watermarked image as a URL or file, or undefined if the\n *   response format is invalid.\n * @link https://apyhub.com/utility/image-processor-watermark\n */\n\nasync function watermark({\n  input,\n  watermark,\n  responseFormat,\n  output,\n}: {\n  input: string | Buffer;\n  watermark: string | Buffer;\n  responseFormat: \"url\" | \"file\";\n  output?: string;\n}): Promise<{ data: string } | undefined> {\n  const client = getInstance();\n  checkMissingParams({ input, watermark, responseFormat });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const inputType = isFileOrUrl(input);\n\n  const requestUrl = `https://api.apyhub.com/processor/image/${handleEndPoint(\n    \"watermark\",\n    inputType,\n    responseFormat\n  )}?output=${output ?? \"output.png\"}`;\n\n  const formData = (): FormData => {\n    const formData = new FormData();\n\n    formData.append(\"image\", input instanceof Buffer ? input : getFile(input), {\n      filename: \"image.png\",\n      contentType: \"application/octet-stream\",\n    });\n    formData.append(\n      \"watermark\",\n      watermark instanceof Buffer ? watermark : getFile(watermark),\n      {\n        filename: \"watermark.png\",\n        contentType: \"application/octet-stream\",\n      }\n    );\n\n    return formData;\n  };\n  return await client.request(\n    \"post\",\n    requestUrl,\n    inputType === \"file\"\n      ? formData()\n      : { imageUrl: input, watermarkUrl: watermark }\n  );\n}\n\nexport { watermark };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Creates an archive file (zip) from a list of files or URLs.\n *\n * @example\n *   const { generate } = require(\"apyhub\");\n *\n *   const archive = async () => {\n *     const data = await generate.archive({\n *       responseFormat: \"url\",\n *       input: [\n *         \"https://assets.apyhub.com/samples/sample.pdf\",\n *         \"https://assets.apyhub.com/samples/sample.xlsx\",\n *       ],\n *     });\n *     return data;\n *   };\n *\n * @example\n *   const { generate } = require(\"apyhub\");\n *\n *   const secureArchive = async () => {\n *     const data = await generate.archive({\n *       responseFormat: \"url\",\n *       input: [\n *         \"https://assets.apyhub.com/samples/sample.pdf\",\n *         \"https://assets.apyhub.com/samples/sample.xlsx\",\n *       ],\n *       password: \"password\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the archive creation.\n * @param {\"url\" | \"file\"} params.responseFormat - The desired response format.\n * @param {string} [params.output] - The desired file name for the output\n *   archive.\n * @param {string[] | Buffer[]} params.input - The list of files or URLs to\n *   archive.\n * @param {string} [params.password] - The password to use for secure archiving.\n * @returns {Promise<{ data: string }>} - A promise that resolves with an object\n *   containing the resulting archive file or URL as a string.\n * @link https://apyhub.com/utility/generate-file-archive\n * @link https://apyhub.com/utility/generate-secure-file-archive\n */\nasync function archive({\n  responseFormat,\n  output,\n  input,\n  password,\n}: {\n  responseFormat: \"url\" | \"file\";\n  output?: string;\n  input: string[] | Buffer[];\n  password?: string;\n}): Promise<{ data: string }> {\n  const client = getInstance();\n  checkMissingParams({ responseFormat, input });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const endpoint = password ? \"secure-archive\" : \"archive\";\n\n  const responseType =\n    responseFormat === \"file\" ? \"archive-file\" : \"archive-url\";\n  const inputType = isFileOrUrl(input[0]) === \"file\" ? \"files\" : \"file-urls\";\n  const url = `\n    https://api.apyhub.com/generate/${endpoint}/${inputType}/${responseType}?output=${output ??\n    \"output.zip\"}`;\n\n  const formData = () => {\n    const formData = getFormData(input, \"files\");\n    password && formData.append(\"password\", password);\n    return formData;\n  };\n\n  const data =\n    inputType === \"file-urls\"\n      ? {\n          urls: input,\n          password: password ?? undefined,\n        }\n      : formData();\n\n  return await client.request(\"post\", url, data);\n}\n\nexport { archive };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\n\n/**\n * Generates a barcode image from a string of up to 80 characters.\n *\n * @example\n *   const { generate } = require(\"apyhub\");\n *\n *   const barcode = async () => {\n *     const data = await generate.barcode({\n *       responseFormat: \"url\",\n *       input: \"https://apyhub.com\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the barcode generation.\n * @param {string & { maxLength: 80 }} params.input - The string to generate the\n *   barcode from.\n * @param {\"file\" | \"url\"} params.responseFormat - The desired response format.\n * @param {string} [params.output] - The desired file name for the output\n *   barcode image.\n * @returns {Promise<{ data: string }>} - A promise that resolves with an object\n *   containing the resulting barcode image file or URL as a string.\n * @link https://apyhub.com/utility/generate-bar-code\n */\nasync function barcode({\n  input,\n  responseFormat,\n  output,\n}: {\n  input: string & { maxLength: 80 };\n  responseFormat: \"file\" | \"url\";\n  output?: string;\n}): Promise<{ data: string }> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const url = `https://api.apyhub.com/generate/barcode/${responseFormat}?output=${\n    output ?? \"output.png\"\n  }`;\n  return await client.request(\"post\", url, { content: input });\n}\n\nexport { barcode };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\n\n/**\n * Generates a QR code image from a string.\n *\n * @example\n *   const { generate } = require(\"apyhub\");\n *\n *   const qr = async () => {\n *     const data = await generate.qr({\n *       responseFormat: \"url\",\n *       input: \"https://apyhub.com\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the QR code generation.\n * @param {string} params.input - The string to generate the QR code from.\n * @param {\"file\" | \"url\"} params.responseFormat - The desired response format.\n * @param {string} [params.output] - The desired file name for the output QR\n *   code image.\n * @returns {Promise<{ data: string }>} - A promise that resolves with an object\n *   containing the resulting QR code image file or URL as a string.\n * @link https://apyhub.com/utility/generate-qr-code\n */\nasync function qr({\n  input,\n  responseFormat,\n  output,\n}: {\n  input: string;\n  responseFormat: \"file\" | \"url\";\n  output?: string;\n}): Promise<{ data: string }> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const url = `https://api.apyhub.com/generate/qr-code/${responseFormat}?output=${\n    output ?? \"output.png\"\n  }`;\n  return await client.request(\"post\", url, { content: input });\n}\n\nexport { qr };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\n\n/**\n * Takes a screenshot of a webpage.\n *\n * @example\n *   const { generate } = require(\"apyhub\");\n *\n *   const screenshot = async () => {\n *     const data = await generate.screenshot({\n *       responseFormat: \"url\",\n *       input: \"https://apyhub.com\",\n *       delay: 5,\n *       quality: 3,\n *       output: \"screenshot.png\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the screenshot generation.\n * @param {string} params.input - The URL of the webpage to take a screenshot\n *   of.\n * @param {string} [params.output] - The desired file name for the output\n *   screenshot image.\n * @param {number} [params.delay] - The delay, in seconds, before taking the\n *   screenshot.\n * @param {1 | 2 | 3 | 4 | 5} [params.quality] - The quality of the screenshot\n *   image.\n * @param {\"file\" | \"url\"} params.responseFormat - The desired response format.\n * @returns {Promise<{ data: string }>} - A promise that resolves with an object\n *   containing the resulting screenshot image file or URL as a string.\n * @link https://apyhub.com/utility/generate-webpage-screenshot\n */\nasync function screenshot({\n  input,\n  output,\n  delay,\n  quality,\n  responseFormat,\n}: {\n  input: string;\n  output?: string;\n  delay?: number;\n  quality?: 1 | 2 | 3 | 4 | 5;\n  responseFormat: \"file\" | \"url\";\n}): Promise<{ data: string }> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n  quality &&\n    checkParamTypes(\n      { quality: quality?.toString() },\n      [1, 2, 3, 4, 5].map((i) => i.toString())\n    );\n\n  const url = `\n        https://api.apyhub.com/generate/screenshot/webpage/image-${responseFormat}?output=${\n    output ?? \"output.png\"\n  }&delay=${delay ?? 3}&quality=${quality ?? 5}&url=${input}`;\n\n  return await client.request(\"get\", url);\n}\n\nexport { screenshot };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\n\n/**\n * Generates a chart image from data and chart options.\n *\n * @example\n *   const { charts } = require(\"apyhub\");\n *\n *   const data = [\n *     { value: 10, label: \"A\" },\n *     { value: 20, label: \"B\" },\n *     { value: 30, label: \"C\" },\n *     { value: 40, label: \"D\" },\n *   ];\n *\n *   charts({\n *     responseFormat: \"file\",\n *     chartType: \"bar\",\n *     output: \"chart.png\",\n *     title: \"My Chart\",\n *     theme: \"light\",\n *     data,\n *   }).then((res) => {\n *     console.log(res);\n *   });\n *\n * @param {Object} options - The options object.\n * @param {\"file\" | \"url\"} options.responseFormat - The format in which the\n *   chart should be returned. Valid values are \"url\" or \"file\".\n * @param {\"bar\" | \"pie\" | \"stacked\"} options.chartType - The type of chart to\n *   generate. Valid values are \"bar\", \"pie\" or \"stacked\".\n * @param {string} [options.output] - The file path where the chart should be\n *   saved. This parameter is only used if responseFormat is \"file\".\n * @param {string} [options.title] - The title of the chart.\n * @param {\"light\" | \"dark\"} [options.theme] - The theme of the chart. Valid\n *   values are \"light\" or \"dark\".\n * @param {{ value: number; label: string }[]} options.data - The data to be\n *   used to generate the chart.\n * @returns {Promise<{ data: string }>} A promise that resolves with the chart\n *   data if successful.\n * @link https://apyhub.com/utility/pie-chart\n * @link https://apyhub.com/utility/stacked-graph\n * @link https://apyhub.com/utility/bar-graph\n */\nasync function charts({\n  responseFormat,\n  chartType,\n  output,\n  title,\n  theme,\n  data,\n}: {\n  responseFormat: \"file\" | \"url\";\n  chartType: \"bar\" | \"pie\" | \"stacked\";\n  output?: string;\n  title?: string;\n  theme?: \"light\" | \"dark\";\n  data: Array<{ value: number; label: string }>;\n}): Promise<{ data: string }> {\n  const client = getInstance();\n\n  checkMissingParams({ responseFormat, chartType, data });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n  checkParamTypes({ chartType }, [\"bar\", \"pie\", \"stacked\"]);\n  theme && checkParamTypes({ theme }, [\"light\", \"dark\"]);\n\n  const url = `https://api.apyhub.com/generate/charts/${chartType}/${responseFormat}?output=${\n    output ?? \"output.png\"\n  }`;\n  const payload = {\n    ...(title && { title }),\n    ...(theme && { theme: theme[0].toUpperCase() + theme.slice(1) }),\n    data,\n  };\n  return await client.request(\"post\", url, payload);\n}\n\nexport { charts };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\n\n/**\n * Generates a PDF file from an HTML string or URL.\n *\n * @example\n *   const { generate } = require(\"apyhub\");\n *\n *   const pdf = async () => {\n *     const data = await generate.pdf({\n *       responseFormat: \"url\",\n *       input: \"https://apyhub.com\",\n *       landscape: true,\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the PDF generation.\n * @param {string} params.input - The HTML string or URL to generate the PDF\n *   from.\n * @param {\"url\" | \"file\"} params.responseFormat - The desired response format.\n * @param {boolean} [params.landscape] - Whether to generate the PDF in\n *   landscape orientation.\n * @returns {Promise<{ data: string }>} - A promise that resolves with an object\n *   containing the resulting PDF file or URL as a string.\n * @link https://apyhub.com/utility/generate-url-pdf\n * @link https://apyhub.com/utility/generate-html-pdf\n */\nasync function pdf({\n  input,\n  responseFormat,\n  landscape,\n}: {\n  input: string;\n  responseFormat: \"url\" | \"file\";\n  landscape?: boolean;\n}): Promise<{ data: string }> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  // check if input string is valid url without using isFileOrUrl\n  // TODO - move this to utils refactor isFileOrUrl to use this\n  const isUrl = (url: string): boolean => {\n    try {\n      const isValid = new URL(url);\n      return !!isValid;\n    } catch (error) {\n      return false;\n    }\n  };\n\n  const inputType = isUrl(input) ? \"webpage\" : \"html-content\";\n  const inputField = isUrl(input) ? \"url\" : \"content\";\n  const url = `https://api.apyhub.com/generate/${inputType}/pdf-${responseFormat}?&landscape=${\n    landscape === true ? \"true\" : \"false\"\n  }`;\n\n  console.log(url);\n\n  return await client.request(\"post\", url, { [inputField]: input });\n}\nexport { pdf };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\n/**\n * Generates an iCalendar file from a list of parameters.\n *\n * @example\n *   const { generate } = require(\"apyhub\");\n *\n *   const ical = async () => {\n *   const data = await generate.ical({\n *   responseFormat: \"url\",\n *   summary: \"Meeting\",\n *   description: \"Meeting description\",\n *   organizerEmail: \"your@mail.com\",\n *   attendeesEmails: [\"john@mail.com\", \"sally@mail.com\"],\n *   timeZone: \"America/New_York\",\n *   startTime: \"10:00\",\n *   endTime: \"11:00\",\n *   meetingDate: \"2020-01-01\",\n *   recurring: true,\n *   recurrence: {\n *   frequency: \"WEEKLY\",\n *   count: 5,\n *   },\n *   });\n *   return data;\n *\n * @param {Object} params - The parameters for the iCalendar file generation.\n * @param {\"file\" | \"url\"} params.responseFormat - The desired response format.\n * @param {string} params.summary - The meeting summary.\n * @param {string} params.description - The meeting description.\n * @param {string} params.organizerEmail - The meeting organizer's email\n *   address.\n * @param {string[]} params.attendeesEmails - The meeting attendees' email\n *   addresses.\n * @param {string} [params.location] - The meeting location.\n * @param {string} params.timeZone - The meeting time zone.\n * @param {string} params.startTime - The meeting start time.\n * @param {string} params.endTime - The meeting end time.\n * @param {string} params.meetingDate - The meeting date.\n * @param {boolean} params.recurring - Whether the meeting is recurring.\n * @param {Object} [params.recurrence] - The meeting recurrence parameters.\n * @param {string} [params.recurrence.frequency] - The meeting recurrence\n *   frequency.\n * @param {number} [params.recurrence.count] - The meeting recurrence count.\n * @returns {Promise<{ data: string }>} - A promise that resolves with an object\n *   containing the resulting iCalendar file or URL as a string.\n * @link https://apyhub.com/utility/generator-ical\n */\nasync function ical({\n  output,\n  responseFormat,\n  summary,\n  description,\n  organizerEmail,\n  attendeesEmails,\n  location,\n  timeZone,\n  startTime,\n  endTime,\n  meetingDate,\n  recurring,\n  recurrence,\n}: {\n  output?: string;\n  responseFormat: \"file\" | \"url\";\n  summary: string;\n  description: string;\n  organizerEmail: string;\n  attendeesEmails: string[];\n  location?: string;\n  timeZone: string;\n  startTime: string;\n  endTime: string;\n  meetingDate: string;\n  recurring?: boolean;\n  recurrence?: {\n    frequency: string;\n    count: number;\n  };\n}): Promise<{ data: string }> {\n  const client = getInstance();\n  checkMissingParams({\n    responseFormat,\n    summary,\n    description,\n    organizerEmail,\n    attendeesEmails,\n    timeZone,\n    startTime,\n    endTime,\n    meetingDate,\n  });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const url = `https://api.apyhub.com/generate/ical/${responseFormat}?output=${output ??\n    \"invite.ics\"}`;\n  return await client.request(\"post\", url, {\n    summary,\n    description,\n    organizer_email: organizerEmail,\n    attendees_email: attendeesEmails,\n    location,\n    time_zone: timeZone,\n    start_time: startTime,\n    end_time: endTime,\n    meeting_date: meetingDate,\n    recurring,\n    recurrence,\n  });\n}\n\nexport { ical };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Creates a thumbnail image from a file or URL.\n *\n * @example\n *   const { generate } = require(\"apyhub\");\n *\n *   const thumbnail = async () => {\n *     const data = await generate.thumbnail({\n *       responseFormat: \"url\",\n *       input: \"https://assets.apyhub.com/samples/sample.pdf\",\n *       width: 200,\n *       height: 200,\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the thumbnail creation.\n * @param {\"url\" | \"file\"} params.responseFormat - The desired response format.\n * @param {string} [params.output] - The desired file name for the output\n *   thumbnail.\n * @param {string | Buffer} params.input - The file or URL to create a thumbnail\n *   from.\n * @param {number} params.width - The desired width of the thumbnail.\n * @param {number} params.height - The desired height of the thumbnail.\n * @returns {Promise<{ data: string }>} - A promise that resolves with an object\n *   containing the resulting thumbnail file or URL as a string.\n * @link https://apyhub.com/utility/image-processor-thumbnail\n */\nasync function thumbnail({\n  input,\n  responseFormat,\n  output,\n  width,\n  height,\n}: {\n  input: string | Buffer;\n  responseFormat: \"url\" | \"file\";\n  output?: string;\n  width: number;\n  height: number;\n}): Promise<{ data: string } | undefined> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat, width, height });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const inputType = isFileOrUrl(input);\n  let endpoint = \"\";\n\n  if (inputType === \"file\" && responseFormat === \"file\") {\n    endpoint = \"file\";\n  } else if (inputType === \"file\" && responseFormat === \"url\") {\n    endpoint = \"file/url\";\n  } else if (inputType === \"url\" && responseFormat === \"file\") {\n    endpoint = \"url/file\";\n  } else if (inputType === \"url\" && responseFormat === \"url\") {\n    endpoint = \"file-urls\";\n  }\n\n  const requestUrl = `https://api.apyhub.com/generate/image/thumbnail/${endpoint}?output=${\n    output ?? \"thumbnail.png\"\n  }&width=${width}&height=${height}`;\n\n  return await client.request(\n    \"post\",\n    requestUrl,\n    inputType === \"file\" ? getFormData(input, \"image\") : { url: input }\n  );\n}\n\nexport { thumbnail };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\n\n/**\n * Extracts text from a webpage.\n *\n * @example\n *   const { extract } = require(\"apyhub\");\n *\n *   const textFromWebpage = async () => {\n *     const data = await extract.textFromWebpage(\"https://www.apyhub.com\");\n *     return data;\n *   };\n *\n * @param {string} url - The URL of the webpage.\n * @returns {Promise<{ data: string }>} A promise that resolves to the text for\n *   the webpage.\n * @link https://apyhub.com/utility/extractor-webpage-text\n */\nasync function textFromWebpage(url: string): Promise<{ data: string }> {\n  const client = getInstance();\n  checkMissingParams({ url });\n\n  const requestUrl = `https://api.apyhub.com/extract/text/webpage?url=${url}`;\n\n  return await client.request(\"get\", requestUrl);\n}\n\nexport { textFromWebpage };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Extracts text from a Word document.\n *\n * @example\n *   const { extract } = require(\"apyhub\");\n *\n *   const textFromWord = async () => {\n *     const data = await extract.textFromWord(\n *       \"https://assets.apyhub.com/samples/sample.docx\"\n *     );\n *     return data;\n *   };\n *\n * @param {string | Buffer} word - The Word document file or URL.\n * @returns {Promise<{ data: string }>} A promise that resolves to the text for\n *   the Word document.\n * @link https://apyhub.com/utility/extractor-word-text\n */\nasync function textFromWord(word: string | Buffer): Promise<{ data: string }> {\n  const client = getInstance();\n  checkMissingParams({ word });\n\n  const inputType = isFileOrUrl(word) === \"file\" ? \"file\" : \"url\";\n\n  const url = `https://api.apyhub.com/extract/text/word-${inputType}`;\n\n  return await client.request(\n    \"post\",\n    url,\n    inputType === \"file\" ? getFormData(word, \"file\") : { url: word }\n  );\n}\n\nexport { textFromWord };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Extracts text from a PDF file.\n *\n * @example\n *   const { extract } = require(\"apyhub\");\n *\n *   const textFromPdf = async () => {\n *     const data = await extract.textFromPdf(\n *       \"https://assets.apyhub.com/samples/sample.pdf\"\n *     );\n *     return data;\n *   };\n *\n * @param {string | Buffer} pdf - The PDF file or URL.\n * @returns {Promise<{ data: string }>} A promise that resolves to the text for\n *   the PDF.\n * @link https://apyhub.com/utility/extractor-pdf-text\n */\nasync function textFromPdf(pdf: string | Buffer): Promise<{ data: string }> {\n  const client = getInstance();\n  checkMissingParams({ pdf });\n\n  const inputType = isFileOrUrl(pdf) === \"file\" ? \"file\" : \"url\";\n\n  const url = `https://api.apyhub.com/extract/text/pdf-${inputType}`;\n  return await client.request(\n    \"post\",\n    url,\n    inputType === \"file\" ? getFormData(pdf, \"file\") : { url: pdf }\n  );\n}\n\nexport { textFromPdf };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Extracts metadata from an image.\n *\n * @example\n *   const { extract } = require(\"apyhub\");\n *\n *   const imageMetadata = async () => {\n *     const data = await extract.imageMetadata(\n *       \"https://assets.apyhub.com/samples/sample.jpg\"\n *     );\n *     return data;\n *   };\n *\n * @param {string | Buffer} image - The image file or URL.\n * @returns {Promise<{ data: string }>} A promise that resolves to the metadata\n *   for the image.\n * @link https://apyhub.com/utility/image-processor-extract-metadata\n */\nasync function imageMetadata(\n  image: string | Buffer\n): Promise<{ data: string }> {\n  const client = getInstance();\n  checkMissingParams({ image });\n\n  const inputType = isFileOrUrl(image) === \"file\" ? \"file\" : \"file-urls\";\n  // const contentType =\n  //   inputType === \"file\" ? \"multipart/form-data\" : \"application/json\";\n\n  const url = `https://api.apyhub.com/processor/image/metadata/${inputType}`;\n\n  return await client.request(\n    \"post\",\n    url,\n    inputType === \"file\" ? getFormData(image, \"image\") : { url: image }\n    // { headers: { \"Content-Type\": contentType } }\n  );\n}\n\nexport { imageMetadata };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Extracts the contents of an archive file (zip) to a list of files or URLs.\n * @example\n *\n * const { extract } = require(\"apyhub\");\n *\n * const unarchive = async () => {\n *  const data = await extract.unarchive({\n *   input: \"https://assets.apyhub.com/samples/sample.zip\",\n * });\n * return data;\n * };\n *\n * @param {Object} params - The parameters for the archive extraction.\n * @param {string | Buffer} params.input - The archive file or URL to extract.\n * @param {string} [params.password] - The password to use for secure extraction.\n *\n * @returns {Promise<{ data: Buffer }>} - A promise that resolves with an object containing the resulting extracted files or URLs as a Buffer.\n *\n * @link https://apyhub.com/utility/extract-file-unarchive\n * @link https://apyhub.com/utility/extract-file-secure-unarchive\n */\nexport async function unarchive({\n  input,\n  password,\n}: {\n  input: string | Buffer;\n  password?: string;\n}): Promise<{ data: Buffer }> {\n  const client = getInstance();\n  checkMissingParams({ input });\n\n  const inputType = isFileOrUrl(input) === \"file\" ? \"file\" : \"url\";\n\n  const url = `https://api.apyhub.com/extract/${\n    password ? \"secure-archive\" : \"archive\"\n  }/${inputType}/file-urls`;\n\n  const formData = () => {\n    const formData = getFormData(input, \"file\");\n    password && formData.append(\"password\", password);\n    return formData;\n  };\n\n  const data =\n    inputType === \"url\"\n      ? {\n          urls: input,\n          password: password ?? undefined,\n        }\n      : formData();\n\n  return await client.request(\"post\", url, data);\n}\n","import { getInstance } from \"../ApyClient\";\n\n/**\n * Retrieves a list of countries and their associated data.\n *\n * @example\n *   import { data } from \"apyhub\";\n *\n *   const countries = async () => {\n *     const data = await data.countries();\n *     return data;\n *   };\n *\n * @returns {Promise<\n *   {\n *     calling_codes: number[];\n *     cca3: string;\n *     emoji: string;\n *     key: string;\n *     value: string;\n *   }[]\n * >}\n *   - A promise that resolves with an array of country objects, each containing\n *       calling codes, cca3 code, emoji, key, and value properties.\n *\n * @link https://apyhub.com/utility/data-lists-country\n */\nasync function countries(): Promise<\n  Array<{\n    calling_codes: number[];\n    cca3: string;\n    emoji: string;\n    key: string;\n    value: string;\n  }>\n> {\n  const client = getInstance();\n  const url = `https://api.apyhub.com/data/dictionary/country`;\n  return await client.request(\"get\", url);\n}\n\nexport { countries };\n","import { getInstance } from \"../ApyClient\";\n\n/**\n * Retrieves information about a specific country.\n *\n * @example\n *   import { data } from \"apyhub\";\n *\n *   const country = () async => {\n *   const data = await data.country(\"United States\");\n *   return data;\n *   }\n *\n * @param {string} country - The name or cca3 code of the country.\n * @returns {Promise<{\n *   value: string;\n *   key: string;\n *   cca3: string;\n *   emoji: string;\n *   calling_code: number[];\n *   subdivision: { code: string; name: string }[];\n * }>}\n *   - A promise that resolves with an object containing the country's value, key,\n *       cca3 code, emoji, calling codes, and an array of subdivisions, each\n *       with a code and name.\n *\n * @link https://apyhub.com/utility/data-info-country\n */\nasync function country(country: string): Promise<{\n  value: string;\n  key: string;\n  cca3: string;\n  emoji: string;\n  calling_code: number[];\n  subdivision: Array<{\n    code: string;\n    name: string;\n  }>;\n}> {\n  const client = getInstance();\n  if (!country) {\n    throw new Error(\"Missing country\");\n  }\n  const url = `https://api.apyhub.com/data/info/country?country=${country}`;\n  return await client.request(\"get\", url);\n}\n\nexport { country };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\n\n/**\n * Converts an amount in one currency to another.\n *\n * @example\n *   import { data } from \"apyhub\";\n *\n *   const currencyConverter = async () => {\n *     const response = await data.currencyConverter({\n *       source: \"USD\",\n *       target: \"EUR\",\n *       date: \"2021-01-01\",\n *     });\n *     return response;\n *   };\n *\n * @param {Object} params - The parameters for the conversion.\n * @param {string} params.source - The source currency.\n * @param {string} params.target - The target currency.\n * @param {string} [params.date] - The date for the conversion (in the format\n *   \"YYYY-MM-DD\"). If not provided, the current date is used.\n * @returns {Promise<{ data: number }>} - A promise that resolves with an object\n *   containing the converted amount.\n * @link https://apyhub.com/utility/currency-conversion\n */\nasync function currencyConverter({\n  source,\n  target,\n  date,\n}: {\n  // TODO - add typescript types for all currencies\n  source: string;\n  target: string;\n  date?: string;\n}): Promise<{ data: number }> {\n  const client = getInstance();\n  checkMissingParams({ source, target });\n\n  const url = `https://api.apyhub.com/data/convert/currency`;\n\n  const body = {\n    source: source.toLowerCase(),\n    target: target.toLowerCase(),\n    date,\n  };\n\n  return await client.request(\"post\", url, body);\n}\n\nexport { currencyConverter };\n","import { getInstance } from \"../ApyClient\";\n\n/**\n * Retrieves a list of currencies and their associated data.\n *\n * @example\n *   import { data } from \"apy-client\";\n *\n *   const currencyList = async () => {\n *     const data = await data.currencyList();\n *     return data;\n *   };\n *\n * @returns {Promise<\n *   {\n *     calling_codes: number[];\n *     cca3: string;\n *     emoji: string;\n *     key: string;\n *     value: string;\n *   }[]\n * >}\n *   - A promise that resolves with an array of currency objects, each containing\n *       calling codes, cca3 code, emoji, key, and value properties.\n *\n * @link https://apyhub.com/utility/data-lists-currency\n */\nasync function currencyList(): Promise<\n  Array<{\n    calling_codes: number[];\n    cca3: string;\n    emoji: string;\n    key: string;\n    value: string;\n  }>\n> {\n  const client = getInstance();\n  const url = `https://api.apyhub.com/data/dictionary/currency`;\n  return await client.request(\"get\", url);\n}\nexport { currencyList };\n","import { getInstance } from \"../ApyClient\";\n\n/**\n * Retrieves a list of timezones and their associated data.\n *\n * @example\n *   import { data } from \"apy-client\";\n *\n *   const timezones = async () => {\n *     const data = await data.timezones();\n *     return data;\n *   };\n *\n * @returns {Promise<{\n *   data: {\n *     key: string;\n *     value: string;\n *     abbreviation: string[];\n *     utc_time: string;\n *   }[];\n * }>}\n *   - A promise that resolves with an object containing an array of timezone\n *       objects, each with a key, value, abbreviation, and utc_time property.\n *\n * @link https://apyhub.com/utility/data-lists-timezone\n */\nasync function timezones(): Promise<{\n  data: Array<{\n    key: string;\n    value: string;\n    abbreviation: string[];\n    utc_time: string;\n  }>;\n}> {\n  const client = getInstance();\n  const url = `https://api.apyhub.com/data/dictionary/timezone`;\n  return await client.request(\"get\", url);\n}\n\nexport { timezones };\n","function handleEndPointConvert(\n  input: string,\n  output: string,\n  inputType: string,\n  responseFormat: string\n): string {\n  if (inputType === \"file\" && responseFormat === \"file\") {\n    return `${input}-file/${output}-file`;\n  } else if (inputType === \"file\" && responseFormat === \"url\") {\n    return `${input}-file/${output}-url`;\n  } else if (inputType === \"url\" && responseFormat === \"file\") {\n    return `${input}-url/${output}-file`;\n  } else if (inputType === \"url\" && responseFormat === \"url\") {\n    return `${input}-url/${output}-url`;\n  }\n  return \"\";\n}\n\nexport { handleEndPointConvert };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { handleEndPointConvert } from \"../utils/handleEndpointConvert\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Converts a CSV file or URL to an Excel file.\n *\n * @example\n *   const { convert } = require(\"apyhub\");\n *\n *   const csvToExcel = async () => {\n *     const data = await convert.csvToExcel({\n *       input: \"https://assets.apyhub.com/samples/sample.csv\",\n *       responseFormat: \"url\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the conversion.\n * @param {string | Buffer} params.input - The CSV file or URL.\n * @param {\"url\" | \"file\"} params.responseFormat - The format for the response.\n * @param {string} [params.output] - The name for the output Excel file.\n * @returns {Promise<{ data: string } | undefined>} A promise that resolves to\n *   the data for the output file or `undefined` if the response format is not\n *   \"url\".\n * @link https://apyhub.com/utility/converter-csv-excel\n */\nasync function csvToExcel({\n  input,\n  responseFormat,\n  output,\n}: {\n  input: string | Buffer;\n  responseFormat: \"url\" | \"file\";\n  output?: string;\n}): Promise<{ data: string } | undefined> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const inputType = isFileOrUrl(input);\n\n  const requestUrl = `https://api.apyhub.com/convert/${handleEndPointConvert(\n    \"csv\",\n    \"excel\",\n    inputType,\n    responseFormat\n  )}?output=${output ?? \"output.xlsx\"}`;\n\n  return await client.request(\n    \"post\",\n    requestUrl,\n    inputType === \"file\" ? getFormData(input, \"file\") : { url: input }\n  );\n}\n\nexport { csvToExcel };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { handleEndPointConvert } from \"../utils/handleEndpointConvert\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Converts an HTML file or URL to a PDF file.\n *\n * @example\n *   const { convert } = require(\"apyhub\");\n *\n *   const htmlToPdf = async () => {\n *     const data = await convert.htmlToPdf({\n *       input: \"https://assets.apyhub.com/samples/sample.html\",\n *       responseFormat: \"url\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the conversion.\n * @param {string | Buffer} params.input - The HTML file or URL.\n * @param {\"url\" | \"file\"} params.responseFormat - The format for the response.\n * @param {string} [params.output] - The name for the output PDF file.\n * @returns {Promise<{ data: string } | undefined>} A promise that resolves to\n *   the data for the output file or `undefined` if the response format is not\n *   \"url\".\n * @link https://apyhub.com/utility/converter-html-pdf\n */\nasync function htmlToPdf({\n  input,\n  responseFormat,\n  output,\n}: {\n  input: string | Buffer;\n  responseFormat: \"url\" | \"file\";\n  output?: string;\n}): Promise<{ data: string } | undefined> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const inputType = isFileOrUrl(input);\n\n  const requestUrl = `https://api.apyhub.com/convert/${handleEndPointConvert(\n    \"html\",\n    \"pdf\",\n    inputType,\n    responseFormat\n  )}?output=${output ?? \"output.pdf\"}`;\n\n  return await client.request(\n    \"post\",\n    requestUrl,\n    inputType === \"file\" ? getFormData(input, \"file\") : { url: input }\n  );\n}\n\nexport { htmlToPdf };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { handleEndPointConvert } from \"../utils/handleEndpointConvert\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Converts an image file or URL to a PDF file.\n *\n * @example\n *   const { convert } = require(\"apyhub\");\n *\n *   const imageToPdf = async () => {\n *     const data = await convert.imageToPdf({\n *       input: \"https://assets.apyhub.com/samples/sample.jpg\",\n *       responseFormat: \"url\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the conversion.\n * @param {string | Buffer} params.input - The image file or URL.\n * @param {\"url\" | \"file\"} params.responseFormat - The format for the response.\n * @param {string} [params.output] - The name for the output PDF file.\n * @returns {Promise<{ data: string } | undefined>} A promise that resolves to\n *   the data for the output file or `undefined` if the response format is not\n *   \"url\".\n * @link https://apyhub.com/utility/converter-image-pdf\n */\nasync function imageToPdf({\n  input,\n  responseFormat,\n  output,\n}: {\n  input: string | Buffer;\n  responseFormat: \"url\" | \"file\";\n  output?: string;\n}): Promise<{ data: string } | undefined> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const inputType = isFileOrUrl(input);\n\n  const requestUrl = `https://api.apyhub.com/convert/${handleEndPointConvert(\n    \"image\",\n    \"pdf\",\n    inputType,\n    responseFormat\n  )}?output=${output ?? \"output.pdf\"}`;\n\n  return await client.request(\n    \"post\",\n    requestUrl,\n    inputType === \"file\" ? getFormData(input, \"file\") : { url: input }\n  );\n}\n\nexport { imageToPdf };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { handleEndPointConvert } from \"../utils/handleEndpointConvert\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Convert markdown to HTML.\n *\n * This function converts the given markdown input to HTML and returns the\n * result.\n *\n * @example\n *   const { convert } = require(\"apyhub\");\n *\n *   const markdownToHtml = async () => {\n *     const data = await convert.markdownToHtml({\n *       input: \"# Hello World\",\n *       responseFormat: \"url\",\n *     });\n *   };\n *\n * @param {Object} params - The parameters for the conversion.\n * @param {string | Buffer} params.input - The markdown input.\n * @param {\"url\" | \"file\"} params.responseFormat - The format of the response.\n *   Can be \"url\" or \"file\".\n * @param {string} [params.output] - The name of the output file.\n * @returns {Promise<{ data: string } | undefined>} - A promise that resolves\n *   with the HTML output.\n * @link https://apyhub.com/utility/converter-md-html\n */\nasync function markdownToHtml({\n  input,\n  responseFormat,\n  output,\n}: {\n  input: string | Buffer;\n  responseFormat: \"url\" | \"file\";\n  output?: string;\n}): Promise<{ data: string } | undefined> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const inputType = isFileOrUrl(input);\n\n  const requestUrl = `https://api.apyhub.com/convert/${handleEndPointConvert(\n    \"md\",\n    \"html\",\n    inputType,\n    responseFormat\n  )}?output=${output ?? \"output.html\"}`;\n\n  return await client.request(\n    \"post\",\n    requestUrl,\n    inputType === \"file\" ? getFormData(input, \"file\") : { url: input }\n  );\n}\n\nexport { markdownToHtml };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { handleEndPointConvert } from \"../utils/handleEndpointConvert\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Convert a presentation to PDF.\n *\n * This function converts the given presentation input to PDF and returns the\n * result.\n *\n * @example\n *   const { convert } = require(\"apyhub\");\n *\n *   const presentationToPdf = async () => {\n *     const data = await convert.presentationToPdf({\n *       input: \"https://assets.apyhub.com/samples/sample.pptx\",\n *       responseFormat: \"url\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the conversion.\n * @param {string | Buffer} params.input - The presentation input.\n * @param {\"url\" | \"file\"} params.responseFormat - The format of the response.\n *   Can be \"url\" or \"file\".\n * @param {string} [params.output] - The name of the output file.\n * @returns {Promise<{ data: string } | undefined>} - A promise that resolves\n *   with the PDF output.\n * @link https://apyhub.com/utility/converter-presentation-pdf\n */\nasync function presentationToPdf({\n  input,\n  responseFormat,\n  output,\n}: {\n  input: string | Buffer;\n  responseFormat: \"url\" | \"file\";\n  output?: string;\n}): Promise<{ data: string } | undefined> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const inputType = isFileOrUrl(input);\n\n  const requestUrl = `https://api.apyhub.com/convert/${handleEndPointConvert(\n    \"presentation\",\n    \"pdf\",\n    inputType,\n    responseFormat\n  )}?output=${output ?? \"output.pdf\"}`;\n\n  return await client.request(\n    \"post\",\n    requestUrl,\n    inputType === \"file\" ? getFormData(input, \"file\") : { url: input }\n  );\n}\n\nexport { presentationToPdf };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { handleEndPointConvert } from \"../utils/handleEndpointConvert\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Converts a spreadsheet file or URL to a PDF file.\n *\n * @example\n *   const { convert } = require(\"apyhub\");\n *\n *   const spreadsheetToPdf = async () => {\n *     const data = await convert.spreadsheetToPdf({\n *       input: \"https://assets.apyhub.com/samples/sample.xlsx\",\n *       responseFormat: \"url\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the conversion.\n * @param {string | Buffer} params.input - The file or URL to convert.\n * @param {\"url\" | \"file\"} params.responseFormat - The desired response format.\n * @param {string} [params.output] - The desired file name for the output PDF.\n * @returns {Promise<{ data: string } | undefined>} - A promise that resolves\n *   with the resulting PDF file or URL as a string, or undefined if the\n *   conversion failed.\n * @link https://apyhub.com/utility/converter-spreadsheet-pdf\n */\nasync function spreadsheetToPdf({\n  input,\n  responseFormat,\n  output,\n}: {\n  input: string | Buffer;\n  responseFormat: \"url\" | \"file\";\n  output?: string;\n}): Promise<{ data: string } | undefined> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const inputType = isFileOrUrl(input);\n\n  const requestUrl = `https://api.apyhub.com/convert/${handleEndPointConvert(\n    \"spreadsheet\",\n    \"pdf\",\n    inputType,\n    responseFormat\n  )}?output=${output ?? \"output.pdf\"}`;\n\n  return await client.request(\n    \"post\",\n    requestUrl,\n    inputType === \"file\" ? getFormData(input, \"file\") : { url: input }\n  );\n}\n\nexport { spreadsheetToPdf };\n","import { getInstance } from \"../ApyClient\";\nimport { checkMissingParams } from \"../utils/checkMissingParams\";\nimport { checkParamTypes } from \"../utils/checkParamsTypes\";\nimport { getFormData } from \"../utils/getFormData\";\nimport { handleEndPointConvert } from \"../utils/handleEndpointConvert\";\nimport { isFileOrUrl } from \"../utils/isFileOrUrl\";\n\n/**\n * Converts a Word file or URL to a PDF file.\n *\n * @example\n *   const { convert } = require(\"apyhub\");\n *\n *   const wordToPdf = async () => {\n *     const data = await convert.wordToPdf({\n *       input: \"https://assets.apyhub.com/samples/sample.docx\",\n *       responseFormat: \"url\",\n *     });\n *     return data;\n *   };\n *\n * @param {Object} params - The parameters for the conversion.\n * @param {string | Buffer} params.input - The file or URL to convert.\n * @param {\"url\" | \"file\"} params.responseFormat - The desired response format.\n * @param {string} [params.output] - The desired file name for the output PDF.\n * @returns {Promise<{ data: string } | undefined>} - A promise that resolves\n *   with the resulting PDF file or URL as a string, or undefined if the\n *   conversion failed.\n * @link https://apyhub.com/utility/converter-doc-pdf\n */\nasync function wordToPdf({\n  input,\n  responseFormat,\n  output,\n}: {\n  input: string | Buffer;\n  responseFormat: \"url\" | \"file\";\n  output?: string;\n}): Promise<{ data: string } | undefined> {\n  const client = getInstance();\n  checkMissingParams({ input, responseFormat });\n  checkParamTypes({ responseFormat }, [\"file\", \"url\"]);\n\n  const inputType = isFileOrUrl(input);\n\n  const requestUrl = `https://api.apyhub.com/convert/${handleEndPointConvert(\n    \"word\",\n    \"pdf\",\n    inputType,\n    responseFormat\n  )}?output=${output ?? \"output.pdf\"}`;\n\n  return await client.request(\n    \"post\",\n    requestUrl,\n    inputType === \"file\" ? getFormData(input, \"file\") : { url: input }\n  );\n}\n\nexport { wordToPdf };\n","import * as fs from \"fs\";\nimport fetch from \"cross-fetch\";\n\nfunction isValidUrl(url: string): boolean {\n  try {\n    const isValid = new URL(url);\n    return !!isValid;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Downloads data to the specified file path.\n *\n * @param {| Blob\n *   | string\n *   | {\n *       data: string;\n *       type?: string;\n *       arrayBuffer?: () => Promise<ArrayBuffer>;\n *     }} data\n *   - The data to download. Can be a Blob, a string, or an object with a `data`\n *       property and optionally a `type` property and an `arrayBuffer` function\n *       that returns a Promise for an ArrayBuffer.\n *\n * @param {string} filePath - The file path to save the downloaded data to.\n * @returns {Promise<void>} A Promise that resolves when the download is\n *   complete.\n * @throws {Error} If the data is invalid or there is an error writing the file.\n */\n\n// TODO : fix this type for data\n// | Blob\n//     | string\n//     | { data: string; type?: string; arrayBuffer?: () => Promise<ArrayBuffer> }\n\nexport async function download(data: any, filePath: string): Promise<void> {\n  let buffer: Buffer = Buffer.alloc(0);\n  if (typeof data === \"string\") {\n    buffer = Buffer.from(data);\n  } else if (typeof data === \"object\" && data.data) {\n    if (isValidUrl(data.data)) {\n      const response = await fetch(data.data);\n      buffer = Buffer.from(await response.arrayBuffer());\n    } else if (typeof data.data === \"string\") {\n      buffer = Buffer.from(data.data);\n    } else if (\"data\" in data && typeof data.data === \"object\") {\n      buffer = Buffer.from(JSON.stringify(data.data));\n    } else {\n      throw new Error(\"Invalid data.data\");\n    }\n  } else if (\n    typeof data === \"object\" &&\n    data.type &&\n    typeof data.arrayBuffer === \"function\"\n  ) {\n    buffer = Buffer.from(await data.arrayBuffer());\n  } else {\n    throw new Error(\"Invalid data\");\n  }\n\n  fs.writeFile(filePath, buffer, (err) => {\n    if (err) {\n      throw err;\n    }\n  });\n}\n"],"names":["ApyClient","apyToken","options","this","headers","apy-token","username","password","Authorization","Buffer","from","toString","debug","requestQueue","rateLimit","rateLimitPeriod","rateLimitTimer","requestPromises","_proto","debugRequest","method","url","data","request","Request","body","console","log","_context","Error","push","requestPromise","Promise","resolve","_this","startRateLimiter","setTimeout","_this2","processRequestQueue","requests","splice","i","length","_context2","response","fetch","FormData","JSON","stringify","handleResponse","reject","ok","_context6","text","status","contentType","get","blobTypes","Set","handleBlob","responseData","_context3","blob","handleText","_context4","handleJson","_context5","json","includes","has","instance","getInstance","fuzzy","_fuzzy","source","target","unicodeNormalized","client","requestUrl","Content-Type","checkMissingParams","params","missingParams","Object","entries","filter","errorMessage","map","join","checkParamTypes","values","stringValues","invalidParams","value","email","_email","checkType","postcode","_postcode","countryCode","toLowerCase","_vat","vat","getFormData","file","fieldName","buffer","formData","f","absoluteFilePath","path","fileBuffer","fs","append","filename","slice","getFile","filePath","handleEndPoint","type","inputType","responseFormat","isFileOrUrl","input","match","crop","_crop","height","width","output","resize","_resize","compress","_compress","quality","watermark","_watermark","imageUrl","watermarkUrl","archive","_archive","endpoint","responseType","urls","undefined","barcode","_barcode","content","qr","_qr","screenshot","_screenshot","delay","charts","_charts","chartType","title","theme","payload","toUpperCase","pdf","_pdf","landscape","isUrl","URL","error","inputField","ical","_ical","summary","description","organizerEmail","attendeesEmails","location","timeZone","startTime","endTime","meetingDate","recurring","recurrence","organizer_email","attendees_email","time_zone","start_time","end_time","meeting_date","thumbnail","_thumbnail","textFromWebpage","_textFromWebpage","textFromWord","_textFromWord","word","textFromPdf","_textFromPdf","imageMetadata","_imageMetadata","image","unarchive","_unarchive","countries","_countries","country","_country","currencyConverter","_currencyConverter","date","currencyList","_currencyList","timezones","_timezones","handleEndPointConvert","csvToExcel","_csvToExcel","htmlToPdf","_htmlToPdf","imageToPdf","_imageToPdf","markdownToHtml","_markdownToHtml","presentationToPdf","_presentationToPdf","spreadsheetToPdf","_spreadsheetToPdf","wordToPdf","_wordToPdf","isValidUrl","_download","alloc","arrayBuffer","err"],"mappings":"0zOACiC,IAE3BA,aAUJ,WACEC,EAMAC,WAhBiBC,aAAU,yBAkB3BA,KAAKC,QACiB,iBAAbH,EACH,CACEI,YAAaJ,GAEK,iBAAbA,GACPA,EAASK,UACTL,EAASM,UAAY,CACnBC,uBAAwBC,OAAOC,KAC1BT,EAASK,aAAYL,EAASM,UACjCI,SAAS,WAEnBR,KAAKS,qBAAQV,SAAAA,EAASU,UACtBT,KAAKU,aAAe,GACpBV,KAAKW,yBAAYZ,SAAAA,EAASY,aAAa,EACvCX,KAAKY,gBAAkB,IACvBZ,KAAKa,eAAiB,KACtBb,KAAKc,gBAAkB,GACxB,kBA0IA,OA1IAC,EAEOC,aAAA,SAAaC,EAAgBC,EAAaC,GAChD,IAAMC,EAAU,IAAIC,UAAQH,EAAK,CAC/BD,OAAAA,EACAhB,QAASD,KAAKC,QACdqB,KAAMH,IAERI,QAAQC,IAAIJ,IACbL,EAEKK,mBAAO,kBAAb,WACEH,EACAC,EACAC,EACApB,mFAAiB,YAAjBA,IAAAA,EAAe,IAEVC,KAAKC,QAAQ,cAAiBD,KAAKC,QAAuB,eAACwB,SAAA,MAAA,MACxD,IAAIC,MAAM,4CAA2C,OAiB7D,GAfMzB,OAAeD,KAAKC,QAAYF,EAAQE,SAE1CD,KAAKS,OACPT,KAAKgB,aAAaC,EAAQC,EAAKC,GAIjCnB,KAAKU,aAAaiB,KAAK,CAAEV,OAAAA,EAAQC,IAAAA,EAAKC,KAAAA,EAAMlB,QAAAA,IAGtC2B,EAAiB,IAAIC,SAAQ,SAACC,GAElCC,EAAKjB,gBAAgBa,KAAKG,OAIxB9B,KAAKa,gBAAcY,UAAA,MAAA,OAAAA,UAERG,EAAc,QAAA,iCAAA,QAIL,OAAxB5B,KAAKgC,mBAAmBP,UAEXG,EAAc,QAAA,iCAAA,QAAA,UAAA,+BAC5B,OAAA,kBAAA,mCAAAb,EAEOiB,iBAAA,sBAENhC,KAAKa,eAAiBoB,YAAW,WAE/BC,EAAKrB,eAAiB,KAGjBqB,EAAKC,wBACTnC,KAAKY,kBACTG,EAEaoB,+BAAmB,kBAAzB,aAAA,YAAA,6BAAA,OAAA,sBAAA,OAEAC,EAAWpC,KAAKU,aAAa2B,OAAO,EAAGrC,KAAKW,WAGzC2B,EAAI,EAAC,OAAA,KAAEA,EAAIF,EAASG,SAAMC,UAAA,MAC3BpB,EAAUgB,EAASE,GAAEE,SAErBC,SAAaD,KACTpB,EAAQH,OAAMuB,OACf,eAMA,oBAAM,MAAA,OAAA,OAAAA,UALQE,EAAMtB,EAAQF,IAAK,CAClCD,OAAQ,MACRhB,QAASmB,EAAQnB,UACjB,QAHM,OAARwC,8BAAQ,QAAA,OAAAD,UAMSE,EAAMtB,EAAQF,IAAK,CAClCD,OAAQ,OACRhB,QAASmB,EAAQnB,QACjBqB,KACEF,EAAQD,gBAAgBwB,EACpBvB,EAAQD,KACRyB,KAAKC,UAAUzB,EAAQD,QAC7B,QAPM,OAARsB,8BAAQ,QAWU,OAXVD,KAWZxC,KAAKc,gBAAe0B,KAACF,EAACE,UAAQxC,KAAK8C,eAAeL,GAAS,QAAAD,YAAAA,2BAAAA,UAAA,MAAA,QAAAA,UAAAA,gBAG3DxC,KAAKc,gBAAgBwB,GAAGT,QAAQkB,cAAe,QA1BdT,IAAGE,SAAA,MAAA,QA+BxCxC,KAAKc,gBAAkB,GAGnBd,KAAKU,aAAa6B,OAAS,GAE7BvC,KAAKgC,mBACN,QAAA,UAAA,wCACF,OAAA,WAAA,mCAAAjB,EAEa+B,0BAAc,kBAApB,WAAqBL,GAAkB,gBAAA,6BAAA,OAAA,sBAAA,OAG5C,GAFGzC,KAAKS,OACPc,QAAQC,IAAIiB,GAETA,EAASO,IAAEC,SAAA,MAAA,OAAAA,SACMR,EAASS,OAAM,OACF,MAC3B,IAAIxB,MADQe,EAASU,oBACc,OAErCC,WAAcX,EAASxC,QAAQoD,IAAI,mBAAmB,GACtDC,EAAY,IAAIC,IAAI,CACxB,YACA,aACA,kBACA,oBAGIC,aAAU,kBAAG,WAAOC,GAAsB,6BAAA,OAAA,sBAAA,OAAA,OAAAC,SACxCD,EAAaE,OAAM,OAAA,iCAAA,OAAA,UAAA,0BAAA,mBADX,mCAEVC,aAAU,kBAAG,WACjBH,GAAsB,6BAAA,OAAA,sBAAA,OAAA,OAAAI,SACgBJ,EAAaP,OAAM,OAAA,iCAAA,OAAA,UAAA,0BAAA,mBAF3C,mCAGVY,aAAU,kBAAG,WACjBL,GAAsB,6BAAA,OAAA,sBAAA,OAAA,OAAAM,SAC6BN,EAAaO,OAAM,OAAA,iCAAA,OAAA,UAAA,0BAAA,mBAFxD,mCAAAf,MAIR,EAAIA,cACLG,EAAYa,SAAS,sBACrBb,EAAYa,SAAS,mBAAY,MAAA,QAAA,OAAAhB,UACvBW,EAAWnB,GAAS,QAAA,iCAAA,QAAA,IAE1Ba,EAAUY,IAAId,IAAYH,UAAA,MAAA,OAAAA,UACvBO,EAAWf,GAAS,QAAAQ,YAAAA,UAAA,MAAA,QAAA,OAAAA,UACpBa,EAAWrB,GAAS,QAAAQ,YAAA,QAAA,+BAAA,QAAA,UAAA,+BAEnC,OAAA,YAAA,wCAGCkB,EAA6B,KAGjC,SAASC,EACPtE,EAMAC,GAKA,IAAKoE,EAAU,CACb,IAAKrE,EACH,MAAM,IAAI4B,MAAM,4CAElByC,EAAW,IAAItE,EAAUC,EAAUC,GAErC,OAAOoE,ECxMT,SAyBeE,KAAK,+BAAA,aA2BnB,OA3BmBC,cAApB,cAAA,gBAAA,6BAAA,OAAA,sBAAA,OAaE,GAZAC,IAAAA,OACAC,IAAAA,OACAC,gBAAAA,sBAMMC,EAASN,IAETO,iEAA4EF,EAAkBjE,WAG/F+D,GAAWC,GAAM/C,SAAA,MAAA,yBACb,CAAEN,KAAM,KAAI,OAAA,OAAAM,SAGRiD,EAAOtD,QAClB,OACAuD,EACA,CACEJ,OAAAA,EACAC,OAAAA,GAEF,CAAEvE,QAAS,CAAE2E,eAAgB,sBAC9B,OAAA,iCAAA,OAAA,UAAA,gFCrDUC,EAAqB,SAACC,GACjC,IAAMC,EAAgBC,OAAOC,QAAQH,GAAQI,QAAO,YAAS,eAC7D,GAAIH,EAAcxC,OAAS,EAAG,CAC5B,IAAM4C,yBAAsCJ,EACzCK,KAAI,YAAK,eACTC,KAAK,MACR,MAAM,IAAI3D,MAAMyD,KCNPG,EAAkB,SAC7BR,EACAS,GAGA,IAAMC,EAAiC,iBAAXD,EAAsB,CAACA,GAAUA,EAGvDE,EAAgBT,OAAOC,QAAQH,GAAQI,QAC3C,YAAA,IAAIQ,OAAK,MAAuB,iBAAVA,IAAuBF,EAAavB,SAASyB,MAGrE,GAAID,EAAclD,OAAS,EAAG,CAC5B,IAAM4C,yBAAsCM,EACzCL,KAAI,YAAK,eACTC,KAAK,mCAAkCG,EAAaH,KAAK,MAC5D,MAAM,IAAI3D,MAAMyD,KCZpB,SAuBeQ,KAAK,+BAAA,aAanB,OAbmBC,cAApB,cAAA,YAAA,6BAAA,OAAA,sBAAA,OAWgE,OAV9DD,IAAAA,MACAE,IAAAA,UAKMnB,EAASN,IACfS,EAAmB,CAAEc,MAAAA,EAAOE,UAAAA,IAC5BP,EAAgB,CAAEO,UAAAA,GAAa,CAAC,MAAO,aAEjC3E,2CAA+C2E,EAASpE,SACjDiD,EAAOtD,QAAQ,OAAQF,EAAK,CAAEyE,MAAAA,IAAQ,OAAA,iCAAA,OAAA,UAAA,iDClCrD,SAuBeG,KAAQ,+BAAA,aAatB,OAbsBC,cAAvB,cAAA,YAAA,6BAAA,OAAA,sBAAA,OAWoF,OAVlFD,IAAAA,SACAE,IAAAA,YAKMtB,EAASN,IACfS,EAAmB,CAAEiB,SAAAA,EAAUE,YAAAA,IAC/BV,EAAgB,CAAEU,YAAaA,EAAYC,eAAiB,CAAC,KAAM,OAE7D/E,+CAAmD8E,EAAYC,cAAaxE,SACrEiD,EAAOtD,QAAQ,OAAQF,EAAK,CAAE4E,SAAAA,IAAW,OAAA,iCAAA,OAAA,UAAA,iDChBtC,aAKjB,OALiBI,cAAlB,WAAmBC,GAAW,MAAA,6BAAA,OAAA,sBAAA,OAGnB,OAFHzB,EAASN,IACfS,EAAmB,CAAEsB,IAAAA,IACZ1E,SACIiD,EAAOtD,QAAQ,6CAAa,CAAE+E,IAAAA,IAAM,OAAA,iCAAA,OAAA,UAAA,8FAvBnD,YAmBkB,0CCnBFC,EACdC,EACAC,GAEA,ICT+BC,EDSzBC,EAAW,IAAI7D,GACD,iBAAT0D,GAAqBA,aAAgB/F,UAC9C+F,EAAO,CAACA,IAEV,gsBAAgBA,kBAAM,CAAA,IAAXI,UACT,GAAiB,iBAANA,EAAgB,CACzB,IAAMC,EAAmBC,UAAaF,GAChCG,EAAaC,eAAgBH,GACnCF,EAASM,OAAOR,EAAWM,EAAY,CACrCxD,YAAa,2BACb2D,SAAUJ,WAAcD,UAG1BF,EAASM,OAAOR,EAAWG,EAAG,CAC5BrD,YAAa,2BACb2D,kBCxByBR,EDwBUE,ECtBH,SAAlCF,EAAOS,MAAM,EAAG,GAAGxG,WACd,MACoC,OAAlC+F,EAAOS,MAAM,EAAG,GAAGxG,WACrB,OACoC,OAAlC+F,EAAOS,MAAM,EAAG,GAAGxG,WACrB,OACoC,OAAlC+F,EAAOS,MAAM,EAAG,GAAGxG,WACrB,OACoC,UAAlC+F,EAAOS,MAAM,EAAG,GAAGxG,WACrB,OACoC,QAAlC+F,EAAOS,MAAM,EAAG,GAAGxG,WACrB,KACoC,OAAlC+F,EAAOS,MAAM,EAAG,GAAGxG,YAEe,QAAlC+F,EAAOS,MAAM,EAAG,GAAGxG,YAEe,QAAlC+F,EAAOS,MAAM,EAAG,GAAGxG,YAEe,SAAlC+F,EAAOS,MAAM,EAAG,GAAGxG,YAEe,SAAlC+F,EAAOS,MAAM,EAAG,GAAGxG,YAEe,SAAlC+F,EAAOS,MAAM,EAAG,GAAGxG,WATrB,MAWoC,SAAlC+F,EAAOS,MAAM,EAAG,GAAGxG,WACrB,MAGF,QDFP,OAAOgG,WAGOS,EAAQC,GACtB,IAAMR,EAAmBC,UAAaO,GAChCb,EAAOQ,eAAgBH,GAE7B,OAAOpG,OAAOC,KAAK8F,YEnCLc,EACdC,EACAC,EACAC,GAEA,MAAkB,SAAdD,GAA2C,SAAnBC,EAChBF,UACa,SAAdC,GAA2C,QAAnBC,EACvBF,eAAyB,WAATA,EAAoB,IAAM,IAC7B,QAAdC,GAA0C,SAAnBC,EACtBF,cACa,QAAdC,GAA0C,QAAnBC,EACtBF,eAEL,YCdOG,EAAYC,GAC1B,OAAIA,aAAiBlH,OACZ,OAEPkH,EAAMC,MACJ,0GAGK,MAEA,OCHX,SA6BeC,KAAI,+BAAA,aA8BlB,OA9BkBC,cAAnB,cAAA,oBAAA,6BAAA,OAAA,sBAAA,OAuBoE,OAtBlEH,IAAAA,MACAF,IAAAA,eACAM,IAAAA,OACAC,IAAAA,MACAC,IAAAA,OAQMpD,EAASN,IACfS,EAAmB,CAAE2C,MAAAA,EAAOF,eAAAA,EAAgBM,OAAAA,EAAQC,MAAAA,IACpDvC,EAAgB,CAAEgC,eAAAA,GAAkB,CAAC,OAAQ,QAEvCD,EAAYE,EAAYC,GAExBtG,4CAAgDiG,EACpD,OACAE,EACAC,qBACUQ,EAAAA,EAAU,yBAAuBF,YAAgBC,EAAKpG,SAErDiD,EAAOtD,QAClB,OACAF,EACc,SAAdmG,EAAuBjB,EAAYoB,EAAO,SAAW,CAAEtG,IAAKsG,IAC7D,OAAA,iCAAA,OAAA,UAAA,iDC1DH,SA6BeO,KAAM,+BAAA,aA8BpB,OA9BoBC,cAArB,cAAA,oBAAA,6BAAA,OAAA,sBAAA,OAuBoE,OAtBlER,IAAAA,MACAF,IAAAA,eACAM,IAAAA,OACAC,IAAAA,MACAC,IAAAA,OAQMpD,EAASN,IACfS,EAAmB,CAAE2C,MAAAA,EAAOF,eAAAA,EAAgBM,OAAAA,EAAQC,MAAAA,IACpDvC,EAAgB,CAAEgC,eAAAA,GAAkB,CAAC,OAAQ,QAEvCD,EAAYE,EAAYC,GAExB7C,4CAAuDwC,EAC3D,SACAE,EACAC,qBACUQ,EAAAA,EAAU,yBAAuBF,YAAgBC,EAAKpG,SAErDiD,EAAOtD,QAClB,OACAuD,EACc,SAAd0C,EAAuBjB,EAAYoB,EAAO,SAAW,CAAEtG,IAAKsG,IAC7D,OAAA,iCAAA,OAAA,UAAA,iDC1DH,SA0BeS,KAAQ,+BAAA,aA6BtB,OA7BsBC,cAAvB,cAAA,kBAAA,6BAAA,OAAA,sBAAA,OAsBuD,OArBrDV,IAAAA,MACAF,IAAAA,eACAa,IAAAA,QACAL,IAAAA,OAQMpD,EAASN,IACfS,EAAmB,CAAE2C,MAAAA,EAAOF,eAAAA,EAAgBa,QAAAA,IAC5C7C,EAAgB,CAAEgC,eAAAA,GAAkB,CAAC,OAAQ,QAEvCD,EAAYE,EAAYC,GAExB7C,4CAAuDwC,EAC3D,WACAE,EACAC,qBACUQ,EAAAA,EAAU,0BAAwBK,EAAO1G,SAExCiD,EAAOtD,QAClB,OACAuD,EACc,SAAd0C,EAAuBjB,EAAYoB,EAAO,SAAW,CAAEtG,IAAKsG,IAC7D,OAAA,iCAAA,OAAA,UAAA,iDCrDH,SA+BeY,KAAS,+BAAA,aAgDvB,OAhDuBC,cAAxB,cAAA,oBAAA,6BAAA,OAAA,sBAAA,OAwCG,OAvCDb,IAAAA,MACAY,IAAAA,UACAd,IAAAA,eACAQ,IAAAA,OAOMpD,EAASN,IACfS,EAAmB,CAAE2C,MAAAA,EAAOY,UAAAA,EAAWd,eAAAA,IACvChC,EAAgB,CAAEgC,eAAAA,GAAkB,CAAC,OAAQ,QAEvCD,EAAYE,EAAYC,GAExB7C,4CAAuDwC,EAC3D,YACAE,EACAC,qBACUQ,EAAAA,EAAU,cAEhBtB,EAAW,WACf,IAAMA,EAAW,IAAI7D,EAerB,OAbA6D,EAASM,OAAO,QAASU,aAAiBlH,OAASkH,EAAQP,EAAQO,GAAQ,CACzET,SAAU,YACV3D,YAAa,6BAEfoD,EAASM,OACP,YACAsB,aAAqB9H,OAAS8H,EAAYnB,EAAQmB,GAClD,CACErB,SAAU,gBACV3D,YAAa,6BAIVoD,GACR/E,SACYiD,EAAOtD,QAClB,OACAuD,EACc,SAAd0C,EACIb,IACA,CAAE8B,SAAUd,EAAOe,aAAcH,IACtC,OAAA,iCAAA,QAAA,UAAA,+GChFH,SA4CeI,KAAO,+BAAA,aAuCrB,OAvCqBC,cAAtB,cAAA,0BAAA,6BAAA,OAAA,sBAAA,OAoCkB,OAnChBnB,IAAAA,eACAQ,IAAAA,OACAN,IAAAA,MACApH,IAAAA,SAOMsE,EAASN,IACfS,EAAmB,CAAEyC,eAAAA,EAAgBE,MAAAA,IACrClC,EAAgB,CAAEgC,eAAAA,GAAkB,CAAC,OAAQ,QAEvCoB,EAAWtI,EAAW,iBAAmB,UAEzCuI,EACe,SAAnBrB,EAA4B,eAAiB,cACzCD,EAAsC,SAA1BE,EAAYC,EAAM,IAAiB,QAAU,YACzDtG,2CAC8BwH,MAAYrB,MAAasB,oBAAuBb,EAAAA,EAClF,cAEItB,EAAW,WACf,IAAMA,EAAWJ,EAAYoB,EAAO,SAEpC,OADApH,GAAYoG,EAASM,OAAO,WAAY1G,GACjCoG,GAGHrF,EACU,cAAdkG,EACI,CACEuB,KAAMpB,EACNpH,eAAUA,EAAAA,OAAYyI,GAExBrC,IAAU/E,UAEHiD,EAAOtD,QAAQ,OAAQF,EAAKC,GAAK,QAAA,iCAAA,QAAA,UAAA,iDCpFhD,SAwBe2H,KAAO,+BAAA,aAiBrB,OAjBqBC,cAAtB,cAAA,cAAA,6BAAA,OAAA,sBAAA,OAeE,OAdAvB,IAAAA,MACAF,IAAAA,eACAQ,IAAAA,OAMMpD,EAASN,IACfS,EAAmB,CAAE2C,MAAAA,EAAOF,eAAAA,IAC5BhC,EAAgB,CAAEgC,eAAAA,GAAkB,CAAC,OAAQ,QAEvCpG,6CAAiDoG,oBACrDQ,EAAAA,EAAU,cACZrG,SACaiD,EAAOtD,QAAQ,OAAQF,EAAK,CAAE8H,QAASxB,IAAQ,OAAA,iCAAA,OAAA,UAAA,iDCxC9D,SAuBeyB,KAAE,+BAAA,aAiBhB,OAjBgBC,cAAjB,cAAA,cAAA,6BAAA,OAAA,sBAAA,OAeE,OAdA1B,IAAAA,MACAF,IAAAA,eACAQ,IAAAA,OAMMpD,EAASN,IACfS,EAAmB,CAAE2C,MAAAA,EAAOF,eAAAA,IAC5BhC,EAAgB,CAAEgC,eAAAA,GAAkB,CAAC,OAAQ,QAEvCpG,6CAAiDoG,oBACrDQ,EAAAA,EAAU,cACZrG,SACaiD,EAAOtD,QAAQ,OAAQF,EAAK,CAAE8H,QAASxB,IAAQ,OAAA,iCAAA,OAAA,UAAA,iDCvC9D,SA+Be2B,KAAU,+BAAA,aA4BxB,OA5BwBC,cAAzB,cAAA,kBAAA,6BAAA,OAAA,sBAAA,OAyB2D,OAxBzD5B,IAAAA,MACAM,IAAAA,OACAuB,IAAAA,MACAlB,IAAAA,QACAb,IAAAA,eAQM5C,EAASN,IACfS,EAAmB,CAAE2C,MAAAA,EAAOF,eAAAA,IAC5BhC,EAAgB,CAAEgC,eAAAA,GAAkB,CAAC,OAAQ,QAC7Ca,GACE7C,EACE,CAAE6C,cAASA,SAAAA,EAAS3H,YACpB,CAAC,EAAG,EAAG,EAAG,EAAG,GAAG4E,KAAI,SAAC9C,GAAC,OAAKA,EAAE9B,eAG3BU,wEAC2DoG,oBAC/DQ,EAAAA,EAAU,+BACFuB,EAAAA,EAAS,sBAAalB,EAAAA,EAAW,WAASX,EAAK/F,SAE5CiD,EAAOtD,QAAQ,MAAOF,GAAI,OAAA,iCAAA,OAAA,UAAA,iDC1DzC,SA0CeoI,KAAM,+BAAA,aA+BpB,OA/BoBC,cAArB,cAAA,sBAAA,6BAAA,OAAA,sBAAA,OA4BQ,OA3BNjC,IAAAA,eACAkC,IAAAA,UACA1B,IAAAA,OACA2B,IAAAA,MACAC,IAAAA,MACAvI,IAAAA,KASMuD,EAASN,IAEfS,EAAmB,CAAEyC,eAAAA,EAAgBkC,UAAAA,EAAWrI,KAAAA,IAChDmE,EAAgB,CAAEgC,eAAAA,GAAkB,CAAC,OAAQ,QAC7ChC,EAAgB,CAAEkE,UAAAA,GAAa,CAAC,MAAO,MAAO,YAC9CE,GAASpE,EAAgB,CAAEoE,MAAAA,GAAS,CAAC,QAAS,SAExCxI,4CAAgDsI,MAAalC,oBACjEQ,EAAAA,EAAU,cAEN6B,OACAF,GAAS,CAAEA,MAAAA,GACXC,GAAS,CAAEA,MAAOA,EAAM,GAAGE,cAAgBF,EAAM1C,MAAM,KAC3D7F,KAAAA,IAAIM,UAEOiD,EAAOtD,QAAQ,OAAQF,EAAKyI,GAAQ,QAAA,iCAAA,QAAA,UAAA,iDCxEnD,SA0BeE,KAAG,+BAAA,aAiCjB,OAjCiBC,cAAlB,cAAA,sBAAA,6BAAA,OAAA,sBAAA,OA8BmB,OA7BjBtC,IAAAA,MACAF,IAAAA,eACAyC,IAAAA,UAMMrF,EAASN,IACfS,EAAmB,CAAE2C,MAAAA,EAAOF,eAAAA,IAC5BhC,EAAgB,CAAEgC,eAAAA,GAAkB,CAAC,OAAQ,QAavCD,GATA2C,EAAQ,SAAC9I,GACb,IAEE,QADgB,IAAI+I,IAAI/I,GAExB,MAAOgJ,GACP,OAAO,KAIa1C,GAAS,UAAY,eACvC2C,EAAaH,EAAMxC,GAAS,MAAQ,UACpCtG,qCAAyCmG,UAAiBC,mBAChD,IAAdyC,EAAqB,OAAS,SAGhCxI,QAAQC,IAAIN,GAAKO,UAEJiD,EAAOtD,QAAQ,OAAQF,UAAQiJ,GAAa3C,MAAQ,QAAA,iCAAA,QAAA,UAAA,iDC3DnE,SA+Ce4C,KAAI,+BAAA,aA6DlB,OA7DkBC,cAAnB,cAAA,kCAAA,6BAAA,OAAA,sBAAA,OA+CgB,OA9CdvC,IAAAA,OACAR,IAAAA,eACAgD,IAAAA,QACAC,IAAAA,YACAC,IAAAA,eACAC,IAAAA,gBACAC,IAAAA,SACAC,IAAAA,SACAC,IAAAA,UACAC,IAAAA,QACAC,IAAAA,YACAC,IAAAA,UACAC,IAAAA,WAmBMtG,EAASN,IACfS,EAAmB,CACjByC,eAAAA,EACAgD,QAAAA,EACAC,YAAAA,EACAC,eAAAA,EACAC,gBAAAA,EACAE,SAAAA,EACAC,UAAAA,EACAC,QAAAA,EACAC,YAAAA,IAEFxF,EAAgB,CAAEgC,eAAAA,GAAkB,CAAC,OAAQ,QAEvCpG,0CAA8CoG,oBAAyBQ,EAAAA,EAC3E,cAAYrG,SACDiD,EAAOtD,QAAQ,OAAQF,EAAK,CACvCoJ,QAAAA,EACAC,YAAAA,EACAU,gBAAiBT,EACjBU,gBAAiBT,EACjBC,SAAAA,EACAS,UAAWR,EACXS,WAAYR,EACZS,SAAUR,EACVS,aAAcR,EACdC,UAAAA,EACAC,WAAAA,IACA,OAAA,iCAAA,OAAA,UAAA,iDCxGJ,SA4BeO,KAAS,+BAAA,aAuCvB,OAvCuBC,cAAxB,cAAA,sBAAA,6BAAA,OAAA,sBAAA,OAgCkC,OA/BhChE,IAAAA,MACAF,IAAAA,eACAQ,IAAAA,OACAD,IAAAA,MACAD,IAAAA,OAQMlD,EAASN,IACfS,EAAmB,CAAE2C,MAAAA,EAAOF,eAAAA,EAAgBO,MAAAA,EAAOD,OAAAA,IACnDtC,EAAgB,CAAEgC,eAAAA,GAAkB,CAAC,OAAQ,QAEvCD,EAAYE,EAAYC,GAC1BkB,EAAW,GAEG,SAAdrB,GAA2C,SAAnBC,EAC1BoB,EAAW,OACY,SAAdrB,GAA2C,QAAnBC,EACjCoB,EAAW,WACY,QAAdrB,GAA0C,SAAnBC,EAChCoB,EAAW,WACY,QAAdrB,GAA0C,QAAnBC,IAChCoB,EAAW,aAGP/D,qDAAgE+D,oBACpEZ,EAAAA,EAAU,2BACFD,aAAgBD,EAAMnG,UAEnBiD,EAAOtD,QAClB,OACAuD,EACc,SAAd0C,EAAuBjB,EAAYoB,EAAO,SAAW,CAAEtG,IAAKsG,IAC7D,QAAA,iCAAA,QAAA,UAAA,iJCrEH,SAgBeiE,MAAe,gCAAA,cAO7B,OAP6BC,eAA9B,WAA+BxK,GAAW,QAAA,6BAAA,OAAA,sBAAA,OAIiC,OAHnEwD,EAASN,IACfS,EAAmB,CAAE3D,IAAAA,IAEfyD,qDAAgEzD,EAAGO,SAE5DiD,EAAOtD,QAAQ,MAAOuD,GAAW,OAAA,iCAAA,OAAA,UAAA,iDCpBhD,SAkBegH,MAAY,gCAAA,cAa1B,OAb0BC,eAA3B,WAA4BC,GAAqB,UAAA,6BAAA,OAAA,sBAAA,OAMkB,OAL3DnH,EAASN,IACfS,EAAmB,CAAEgH,KAAAA,IAEfxE,EAAkC,SAAtBE,EAAYsE,GAAmB,OAAS,MAEpD3K,8CAAkDmG,EAAS5F,SAEpDiD,EAAOtD,QAClB,OACAF,EACc,SAAdmG,EAAuBjB,EAAYyF,EAAM,QAAU,CAAE3K,IAAK2K,IAC3D,OAAA,iCAAA,OAAA,UAAA,iDC9BH,SAkBeC,MAAW,gCAAA,cAYzB,OAZyBC,eAA1B,WAA2BlC,GAAoB,UAAA,6BAAA,OAAA,sBAAA,OAMmB,OAL1DnF,EAASN,IACfS,EAAmB,CAAEgF,IAAAA,IAEfxC,EAAiC,SAArBE,EAAYsC,GAAkB,OAAS,MAEnD3I,6CAAiDmG,EAAS5F,SACnDiD,EAAOtD,QAClB,OACAF,EACc,SAAdmG,EAAuBjB,EAAYyD,EAAK,QAAU,CAAE3I,IAAK2I,IAC1D,OAAA,iCAAA,OAAA,UAAA,iDC7BH,SAkBemC,MAAa,gCAAA,cAkB3B,OAlB2BC,eAA5B,WACEC,GAAsB,UAAA,6BAAA,OAAA,sBAAA,OASkD,OAPlExH,EAASN,IACfS,EAAmB,CAAEqH,MAAAA,IAEf7E,EAAmC,SAAvBE,EAAY2E,GAAoB,OAAS,YAIrDhL,qDAAyDmG,EAAS5F,SAE3DiD,EAAOtD,QAClB,OACAF,EACc,SAAdmG,EAAuBjB,EAAY8F,EAAO,SAAW,CAAEhL,IAAKgL,IAE7D,OAAA,iCAAA,OAAA,UAAA,0DCbmBC,MAAS,gCA+B9B,cAAA,OAAAC,eA/BM,cAAA,kBAAA,6BAAA,OAAA,sBAAA,OA4BW,OA3BhB5E,IAAAA,MACApH,IAAAA,SAKMsE,EAASN,IACfS,EAAmB,CAAE2C,MAAAA,IAEfH,EAAmC,SAAvBE,EAAYC,GAAoB,OAAS,MAErDtG,qCACJd,EAAW,iBAAmB,eAC5BiH,eAEEb,EAAW,WACf,IAAMA,EAAWJ,EAAYoB,EAAO,QAEpC,OADApH,GAAYoG,EAASM,OAAO,WAAY1G,GACjCoG,GAGHrF,EACU,QAAdkG,EACI,CACEuB,KAAMpB,EACNpH,eAAUA,EAAAA,OAAYyI,GAExBrC,IAAU/E,SAEHiD,EAAOtD,QAAQ,OAAQF,EAAKC,GAAK,OAAA,iCAAA,QAAA,UAAA,yJCvDhD,SAyBekL,KAAS,gCAAA,cAYvB,OAZuBC,eAAxB,aAAA,MAAA,6BAAA,OAAA,sBAAA,OAUW,OADH5H,EAASN,IACN3C,SACIiD,EAAOtD,QAAQ,wDAAW,OAAA,iCAAA,OAAA,UAAA,iDCpCzC,SA0BemL,MAAO,gCAAA,cAiBrB,OAjBqBC,eAAtB,WAAuBD,GAAe,QAAA,6BAAA,OAAA,sBAAA,OAWR,GAAtB7H,EAASN,IACVmI,GAAO9K,SAAA,MAAA,MACJ,IAAIC,MAAM,mBAAkB,OAEmC,OAAjER,sDAA0DqL,EAAO9K,SAC1DiD,EAAOtD,QAAQ,MAAOF,GAAI,OAAA,iCAAA,OAAA,UAAA,iDCzCzC,SAwBeuL,MAAiB,gCAAA,cAsB/B,OAtB+BC,eAAhC,cAAA,cAAA,6BAAA,OAAA,sBAAA,OAmBG,OAlBDnI,IAAAA,OACAC,IAAAA,OACAmI,IAAAA,KAOMjI,EAASN,IACfS,EAAmB,CAAEN,OAAAA,EAAQC,OAAAA,IAIvBlD,EAAO,CACXiD,OAAQA,EAAO0B,cACfzB,OAAQA,EAAOyB,cACf0G,KAAAA,GACDlL,SAEYiD,EAAOtD,QAAQ,sDAAaE,GAAK,OAAA,iCAAA,OAAA,UAAA,iDC9ChD,SAyBesL,KAAY,gCAAA,cAY1B,OAZ0BC,eAA3B,aAAA,MAAA,6BAAA,OAAA,sBAAA,OAUW,OADHnI,EAASN,IACN3C,SACIiD,EAAOtD,QAAQ,yDAAW,OAAA,iCAAA,OAAA,UAAA,iDCpCzC,SAwBe0L,KAAS,gCAAA,cAWvB,OAXuBC,eAAxB,aAAA,MAAA,6BAAA,OAAA,sBAAA,OASW,OADHrI,EAASN,IACN3C,SACIiD,EAAOtD,QAAQ,yDAAW,OAAA,iCAAA,OAAA,UAAA,mJCpCzC,SAAS4L,GACPxF,EACAM,EACAT,EACAC,GAEA,MAAkB,SAAdD,GAA2C,SAAnBC,EAChBE,WAAcM,UACD,SAAdT,GAA2C,QAAnBC,EACvBE,WAAcM,SACD,QAAdT,GAA0C,SAAnBC,EACtBE,UAAaM,UACA,QAAdT,GAA0C,QAAnBC,EACtBE,UAAaM,SAElB,GCRT,SAuBemF,MAAU,gCAAA,cA2BxB,OA3BwBC,eAAzB,cAAA,gBAAA,6BAAA,OAAA,sBAAA,OAoBqC,OAnBnC1F,IAAAA,MACAF,IAAAA,eACAQ,IAAAA,OAMMpD,EAASN,IACfS,EAAmB,CAAE2C,MAAAA,EAAOF,eAAAA,IAC5BhC,EAAgB,CAAEgC,eAAAA,GAAkB,CAAC,OAAQ,QAEvCD,EAAYE,EAAYC,GAExB7C,oCAA+CqI,GACnD,MACA,QACA3F,EACAC,qBACUQ,EAAAA,EAAU,eAAarG,SAEtBiD,EAAOtD,QAClB,OACAuD,EACc,SAAd0C,EAAuBjB,EAAYoB,EAAO,QAAU,CAAEtG,IAAKsG,IAC5D,OAAA,iCAAA,OAAA,UAAA,iDCjDH,SAuBe2F,MAAS,gCAAA,cA2BvB,OA3BuBC,eAAxB,cAAA,gBAAA,6BAAA,OAAA,sBAAA,OAoBoC,OAnBlC5F,IAAAA,MACAF,IAAAA,eACAQ,IAAAA,OAMMpD,EAASN,IACfS,EAAmB,CAAE2C,MAAAA,EAAOF,eAAAA,IAC5BhC,EAAgB,CAAEgC,eAAAA,GAAkB,CAAC,OAAQ,QAEvCD,EAAYE,EAAYC,GAExB7C,oCAA+CqI,GACnD,OACA,MACA3F,EACAC,qBACUQ,EAAAA,EAAU,cAAYrG,SAErBiD,EAAOtD,QAClB,OACAuD,EACc,SAAd0C,EAAuBjB,EAAYoB,EAAO,QAAU,CAAEtG,IAAKsG,IAC5D,OAAA,iCAAA,OAAA,UAAA,iDCjDH,SAuBe6F,MAAU,gCAAA,cA2BxB,OA3BwBC,eAAzB,cAAA,gBAAA,6BAAA,OAAA,sBAAA,OAoBoC,OAnBlC9F,IAAAA,MACAF,IAAAA,eACAQ,IAAAA,OAMMpD,EAASN,IACfS,EAAmB,CAAE2C,MAAAA,EAAOF,eAAAA,IAC5BhC,EAAgB,CAAEgC,eAAAA,GAAkB,CAAC,OAAQ,QAEvCD,EAAYE,EAAYC,GAExB7C,oCAA+CqI,GACnD,QACA,MACA3F,EACAC,qBACUQ,EAAAA,EAAU,cAAYrG,SAErBiD,EAAOtD,QAClB,OACAuD,EACc,SAAd0C,EAAuBjB,EAAYoB,EAAO,QAAU,CAAEtG,IAAKsG,IAC5D,OAAA,iCAAA,OAAA,UAAA,iDCjDH,SAyBe+F,MAAc,gCAAA,cA2B5B,OA3B4BC,eAA7B,cAAA,gBAAA,6BAAA,OAAA,sBAAA,OAoBqC,OAnBnChG,IAAAA,MACAF,IAAAA,eACAQ,IAAAA,OAMMpD,EAASN,IACfS,EAAmB,CAAE2C,MAAAA,EAAOF,eAAAA,IAC5BhC,EAAgB,CAAEgC,eAAAA,GAAkB,CAAC,OAAQ,QAEvCD,EAAYE,EAAYC,GAExB7C,oCAA+CqI,GACnD,KACA,OACA3F,EACAC,qBACUQ,EAAAA,EAAU,eAAarG,SAEtBiD,EAAOtD,QAClB,OACAuD,EACc,SAAd0C,EAAuBjB,EAAYoB,EAAO,QAAU,CAAEtG,IAAKsG,IAC5D,OAAA,iCAAA,OAAA,UAAA,iDCnDH,SA0BeiG,MAAiB,gCAAA,cA2B/B,OA3B+BC,eAAhC,cAAA,gBAAA,6BAAA,OAAA,sBAAA,OAoBoC,OAnBlClG,IAAAA,MACAF,IAAAA,eACAQ,IAAAA,OAMMpD,EAASN,IACfS,EAAmB,CAAE2C,MAAAA,EAAOF,eAAAA,IAC5BhC,EAAgB,CAAEgC,eAAAA,GAAkB,CAAC,OAAQ,QAEvCD,EAAYE,EAAYC,GAExB7C,oCAA+CqI,GACnD,eACA,MACA3F,EACAC,qBACUQ,EAAAA,EAAU,cAAYrG,SAErBiD,EAAOtD,QAClB,OACAuD,EACc,SAAd0C,EAAuBjB,EAAYoB,EAAO,QAAU,CAAEtG,IAAKsG,IAC5D,OAAA,iCAAA,OAAA,UAAA,iDCpDH,SAuBemG,MAAgB,gCAAA,cA2B9B,OA3B8BC,eAA/B,cAAA,gBAAA,6BAAA,OAAA,sBAAA,OAoBoC,OAnBlCpG,IAAAA,MACAF,IAAAA,eACAQ,IAAAA,OAMMpD,EAASN,IACfS,EAAmB,CAAE2C,MAAAA,EAAOF,eAAAA,IAC5BhC,EAAgB,CAAEgC,eAAAA,GAAkB,CAAC,OAAQ,QAEvCD,EAAYE,EAAYC,GAExB7C,oCAA+CqI,GACnD,cACA,MACA3F,EACAC,qBACUQ,EAAAA,EAAU,cAAYrG,SAErBiD,EAAOtD,QAClB,OACAuD,EACc,SAAd0C,EAAuBjB,EAAYoB,EAAO,QAAU,CAAEtG,IAAKsG,IAC5D,OAAA,iCAAA,OAAA,UAAA,iDCjDH,SAuBeqG,MAAS,gCAAA,cA2BvB,OA3BuBC,eAAxB,cAAA,gBAAA,6BAAA,OAAA,sBAAA,OAoBoC,OAnBlCtG,IAAAA,MACAF,IAAAA,eACAQ,IAAAA,OAMMpD,EAASN,IACfS,EAAmB,CAAE2C,MAAAA,EAAOF,eAAAA,IAC5BhC,EAAgB,CAAEgC,eAAAA,GAAkB,CAAC,OAAQ,QAEvCD,EAAYE,EAAYC,GAExB7C,oCAA+CqI,GACnD,OACA,MACA3F,EACAC,qBACUQ,EAAAA,EAAU,cAAYrG,SAErBiD,EAAOtD,QAClB,OACAuD,EACc,SAAd0C,EAAuBjB,EAAYoB,EAAO,QAAU,CAAEtG,IAAKsG,IAC5D,OAAA,iCAAA,OAAA,UAAA,0LCrDH,SAASuG,GAAW7M,GAClB,IAEE,QADgB,IAAI+I,IAAI/I,GAExB,MAAOgJ,GACP,OAAO,GA2DV,cAAA,OAAA8D,eA9BM,WAAwB7M,EAAW+F,GAAgB,QAAA,6BAAA,OAAA,sBAAA,OACpB,GAAhCX,EAAiBjG,OAAO2N,MAAM,GACd,iBAAT9M,GAAiBM,SAAA,MAC1B8E,EAASjG,OAAOC,KAAKY,GAAMM,UAAA,MAAA,OAAA,GACF,iBAATN,IAAqBA,EAAKA,MAAIM,UAAA,MAAA,IAC1CsM,GAAW5M,EAAKA,OAAKM,UAAA,MAAA,OAAAA,SACAiB,EAAMvB,EAAKA,MAAK,OACxB,OADTsB,SAAQhB,KACLnB,OAAMmB,UAAYgB,EAASyL,cAAa,QAAAzM,YAAjD8E,OAAgBhG,qBAAIkB,UAAA,MAAA,QAAA,GACU,iBAAdN,EAAKA,MAAiBM,UAAA,MACtC8E,EAASjG,OAAOC,KAAKY,EAAKA,MAAMM,UAAA,MAAA,QAAA,KACvB,SAAUN,IAA6B,iBAAdA,EAAKA,MAAiBM,UAAA,MACxD8E,EAASjG,OAAOC,KAAKqC,KAAKC,UAAU1B,EAAKA,OAAOM,UAAA,MAAA,QAAA,MAE1C,IAAIC,MAAM,qBAAoB,QAAAD,UAAA,MAAA,QAAA,GAGtB,iBAATN,IACPA,EAAKiG,MACuB,mBAArBjG,EAAK+M,aAA0BzM,UAAA,MAEvB,OAFuBA,KAE7BnB,OAAMmB,UAAYN,EAAK+M,cAAa,QAAAzM,YAA7C8E,OAAgBhG,qBAAIkB,UAAA,MAAA,QAAA,MAEd,IAAIC,MAAM,gBAAe,QAGjCmF,YAAaK,EAAUX,GAAQ,SAAC4H,GAC9B,GAAIA,EACF,MAAMA,KAEP,QAAA,UAAA,6TA7ByB,uOzCiL9B,SACErO,EAMAC,GAKAqE,EAAYtE,EAAUC"}